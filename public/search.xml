<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>装饰器</title>
    <url>/undefined/38966/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>装饰器模式(Decorator Pattern)允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，他是作为现有的类的一个包装。<br>这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。<br>通过下面的实例来演示装饰器模式的用法。其中，我们将把一个形状装饰上不同的颜色，同时又不改变形状类。</p>
</blockquote><a id="more"></a>
<h1 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h1><ul>
<li><strong>意图：</strong> 动态地给一个对象添加一些额外的职责。新增加功能来说，装饰器模式相比生成子类更为灵活。</li>
<li><strong>主要解决：</strong> 一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。</li>
<li><strong>何时使用：</strong> 在不想增加很多子类的情况下扩展类。</li>
<li><strong>如何解决：</strong> 将具体功能职责划分，同时继承装饰者模式。</li>
<li><strong>关键代码：</strong> </li>
</ul>
<ol>
<li>Component类充当抽象角色，不应该具体实现。</li>
<li>修饰类引用和继承Component类，具体扩展类重写父类方法。</li>
</ol>
<ul>
<li><strong>应用实例：</strong> </li>
</ul>
<ol>
<li>孙悟空有72变，当他变成“庙宇”后，他的根本还是一只猴子，但是他又有了庙宇的功能。</li>
<li>不论一幅画有没有画框都可以挂在墙上，但是通常都是有画框的，并且实际上是画框被挂在墙上。在挂在墙上之前，画可以被蒙上玻璃，装到框子里；这时画、玻璃和护矿形成一个物体。</li>
</ol>
<ul>
<li><strong><em>优点：</em></strong> 装饰类和被装饰类可以独立发展，不会互相耦合，装饰模式是继承的一个替代模式，装饰模式可以扩展一个实现类的功能。</li>
<li><strong><em>缺点：</em></strong> 多层装饰比较复杂。</li>
<li><strong>使用场景：</strong> </li>
</ul>
<ol>
<li>扩展一个类的功能。</li>
<li>动态增加功能，动态撤销。</li>
</ol>
<ul>
<li><strong>注意事项：</strong> 可替代继承。</li>
</ul>
<h1 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h1><blockquote>
<p>我们将创建一个Shape接口和实现了Shape接口的实体类。然后我们创建一个实现了Shape接口的抽象装饰类ShapeDecorator，并把Shape对象作为它的实例变量。<br>RedShapeDecorator是实现了ShapeDecorator的实体类。<br>DecoratorPatternDemo，我们的演示类使用RedShapeDecorator来装饰Shape对象。</p>
</blockquote>
<img src="/undefined/undefined/%E8%A3%85%E9%A5%B0%E5%99%A8.jpg" class title="装饰器UML图">

<h2 id="步骤1："><a href="#步骤1：" class="headerlink" title="步骤1："></a>步骤1：</h2><blockquote>
<p>创建一个接口：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Shape.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤2："><a href="#步骤2：" class="headerlink" title="步骤2："></a>步骤2：</h2><blockquote>
<p>创建实现接口的实体类。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Rectangle.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Shape: Rectangle"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Circle.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Shape: Circle"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="步骤3："><a href="#步骤3：" class="headerlink" title="步骤3："></a>步骤3：</h2><blockquote>
<p>创建实现了Shape接口的抽象装饰类。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*ShapeDecorator.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeDecorator</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="keyword">protected</span> Shape decoratedShape;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ShapeDecorator</span><span class="params">(Shape decoratedShape)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.decoratedShape = decoratedShape;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>&#123;</span><br><span class="line">      decoratedShape.draw();</span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤4："><a href="#步骤4：" class="headerlink" title="步骤4："></a>步骤4：</h2><blockquote>
<p>创建扩展了ShapeDecorator类的实体装饰类。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*RedShapeDecorator.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedShapeDecorator</span> <span class="keyword">extends</span> <span class="title">ShapeDecorator</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">RedShapeDecorator</span><span class="params">(Shape decoratedShape)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(decoratedShape);     </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      decoratedShape.draw();         </span><br><span class="line">      setRedBorder(decoratedShape);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setRedBorder</span><span class="params">(Shape decoratedShape)</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Border Color: Red"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤5："><a href="#步骤5：" class="headerlink" title="步骤5："></a>步骤5：</h2><blockquote>
<p>使用RedShapeDecorator来装饰Shape对象。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*DecoratorPatternDemo.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecoratorPatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">      Shape circle = <span class="keyword">new</span> Circle();</span><br><span class="line">      ShapeDecorator redCircle = <span class="keyword">new</span> RedShapeDecorator(<span class="keyword">new</span> Circle());</span><br><span class="line">      ShapeDecorator redRectangle = <span class="keyword">new</span> RedShapeDecorator(<span class="keyword">new</span> Rectangle());</span><br><span class="line">      <span class="comment">//Shape redCircle = new RedShapeDecorator(new Circle());</span></span><br><span class="line">      <span class="comment">//Shape redRectangle = new RedShapeDecorator(new Rectangle());</span></span><br><span class="line">      System.out.println(<span class="string">"Circle with normal border"</span>);</span><br><span class="line">      circle.draw();</span><br><span class="line"> </span><br><span class="line">      System.out.println(<span class="string">"\nCircle of red border"</span>);</span><br><span class="line">      redCircle.draw();</span><br><span class="line"> </span><br><span class="line">      System.out.println(<span class="string">"\nRectangle of red border"</span>);</span><br><span class="line">      redRectangle.draw();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤6："><a href="#步骤6：" class="headerlink" title="步骤6："></a>步骤6：</h2><blockquote>
<p>执行程序，输出结果：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Circle with normal border</span><br><span class="line">Shape: Circle</span><br><span class="line"></span><br><span class="line">Circle of red border</span><br><span class="line">Shape: Circle</span><br><span class="line">Border Color: Red</span><br><span class="line"></span><br><span class="line">Rectangle of red border</span><br><span class="line">Shape: Rectangle</span><br><span class="line">Border Color: Red</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>组合模式</title>
    <url>/undefined/44993/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>组合模式(Composite Pattern),又叫部分整体模式，是用于把一族相似的对象当做一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。<br>组合模式，就是在一个对象中包含其他对象，这些被包含的对象可能是终点对象（不再包含别的对象），也有可能是非终点对象（其内部还包含其他对象，或叫组对象），我们将对象称为节点，即一个根节点包含许多子节点，这些子节点有的不再包含子节点，而有的仍然包含子节点<br>实例为：组织中员工的层次结构。</p>
</blockquote><a id="more"></a>

<h1 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h1><ul>
<li><strong>意图：</strong> 将对象组合成树形结构以宝石“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</li>
<li><strong>主要解决：</strong> 它在我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以像处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。</li>
<li><strong>何时使用：</strong> </li>
</ul>
<ol>
<li>想表示对象的部分-整体层次结构(树形结构)。</li>
<li>您希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。</li>
</ol>
<ul>
<li><strong>如何解决：</strong> 树枝和叶子实现统一接口，树枝内部组合该接口。</li>
<li><strong>关键代码：</strong> 树枝内部组合该接口，并且含有内部属性List，里面放Component。</li>
<li><strong>应用实例：</strong> </li>
</ul>
<ol>
<li>算数表达式包括操作数、操作符合另一个操作数，其中，另一个操作符也可以是操作数、操作符合另一个操作数。</li>
<li>在Java awt和Swing中，对于Button和CheckBox是树叶，Container是树枝。</li>
</ol>
<ul>
<li><strong><em>优点：</em></strong> </li>
</ul>
<ol>
<li>高层模块调用简单</li>
<li>节点自由增加。</li>
</ol>
<ul>
<li><strong><em>缺点：</em></strong> 在使用组合模式时，其叶子和树枝的生命都是实现类，而不是接口，违反了依赖倒置原则。</li>
<li><strong>使用场景：</strong> 部分、整体场景，如树形菜单，文件、文件夹的管理。</li>
<li><strong>注意事项：</strong> 定义时为具体类。</li>
</ul>
<h1 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h1><blockquote>
<p>我们有一个类Employee,该类被当做组合模型类。CompositePatternDemo，我们的演示类使用Employee类来添加部门层次结构，并打印所有员工。</p>
</blockquote>
<img src="/undefined/44993/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F.jpg" class title="组合模式UML图">

<h2 id="步骤1："><a href="#步骤1：" class="headerlink" title="步骤1："></a>步骤1：</h2><blockquote>
<p>创建Employee类，该类带有Employee对象的列表。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Employee.java*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> String dept;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> salary;</span><br><span class="line">   <span class="keyword">private</span> List&lt;Employee&gt; subordinates;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//构造函数</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name,String dept, <span class="keyword">int</span> sal)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.dept = dept;</span><br><span class="line">      <span class="keyword">this</span>.salary = sal;</span><br><span class="line">      subordinates = <span class="keyword">new</span> ArrayList&lt;Employee&gt;();</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Employee e)</span> </span>&#123;</span><br><span class="line">      subordinates.add(e);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Employee e)</span> </span>&#123;</span><br><span class="line">      subordinates.remove(e);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">getSubordinates</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> subordinates;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="string">"Employee :[ Name : "</span>+ name </span><br><span class="line">      +<span class="string">", dept : "</span>+ dept + <span class="string">", salary :"</span></span><br><span class="line">      + salary+<span class="string">" ]"</span>);</span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="步骤2："><a href="#步骤2：" class="headerlink" title="步骤2："></a>步骤2：</h2><blockquote>
<p>使用 Employee 类来创建和打印员工的层次结构。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*CompositePatternDemo.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompositePatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Employee CEO = <span class="keyword">new</span> Employee(<span class="string">"John"</span>,<span class="string">"CEO"</span>, <span class="number">30000</span>);</span><br><span class="line"> </span><br><span class="line">      Employee headSales = <span class="keyword">new</span> Employee(<span class="string">"Robert"</span>,<span class="string">"Head Sales"</span>, <span class="number">20000</span>);</span><br><span class="line"> </span><br><span class="line">      Employee headMarketing = <span class="keyword">new</span> Employee(<span class="string">"Michel"</span>,<span class="string">"Head Marketing"</span>, <span class="number">20000</span>);</span><br><span class="line"> </span><br><span class="line">      Employee clerk1 = <span class="keyword">new</span> Employee(<span class="string">"Laura"</span>,<span class="string">"Marketing"</span>, <span class="number">10000</span>);</span><br><span class="line">      Employee clerk2 = <span class="keyword">new</span> Employee(<span class="string">"Bob"</span>,<span class="string">"Marketing"</span>, <span class="number">10000</span>);</span><br><span class="line"> </span><br><span class="line">      Employee salesExecutive1 = <span class="keyword">new</span> Employee(<span class="string">"Richard"</span>,<span class="string">"Sales"</span>, <span class="number">10000</span>);</span><br><span class="line">      Employee salesExecutive2 = <span class="keyword">new</span> Employee(<span class="string">"Rob"</span>,<span class="string">"Sales"</span>, <span class="number">10000</span>);</span><br><span class="line"> </span><br><span class="line">      CEO.add(headSales);</span><br><span class="line">      CEO.add(headMarketing);</span><br><span class="line"> </span><br><span class="line">      headSales.add(salesExecutive1);</span><br><span class="line">      headSales.add(salesExecutive2);</span><br><span class="line"> </span><br><span class="line">      headMarketing.add(clerk1);</span><br><span class="line">      headMarketing.add(clerk2);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//打印该组织的所有员工</span></span><br><span class="line">      System.out.println(CEO); </span><br><span class="line">      <span class="keyword">for</span> (Employee headEmployee : CEO.getSubordinates()) &#123;</span><br><span class="line">         System.out.println(headEmployee);</span><br><span class="line">         <span class="keyword">for</span> (Employee employee : headEmployee.getSubordinates()) &#123;</span><br><span class="line">            System.out.println(employee);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;        </span><br><span class="line">   &#125;          </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤 3"></a>步骤 3</h2><blockquote>
<p>执行程序，输出结果为：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Employee :[ Name : John, dept : CEO, salary :<span class="number">30000</span> ]</span><br><span class="line">Employee :[ Name : Robert, dept : Head Sales, salary :<span class="number">20000</span> ]</span><br><span class="line">Employee :[ Name : Richard, dept : Sales, salary :<span class="number">10000</span> ]</span><br><span class="line">Employee :[ Name : Rob, dept : Sales, salary :<span class="number">10000</span> ]</span><br><span class="line">Employee :[ Name : Michel, dept : Head Marketing, salary :<span class="number">20000</span> ]</span><br><span class="line">Employee :[ Name : Laura, dept : Marketing, salary :<span class="number">10000</span> ]</span><br><span class="line">Employee :[ Name : Bob, dept : Marketing, salary :<span class="number">10000</span> ]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>过滤器模式</title>
    <url>/undefined/6526/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>过滤器模式(Filter Pattern)或标准器模式(Criteria Pattern) 是一种设计模式，这种模式允许开发人员使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把他们连接起来。这种类型的设计模式属于结构型模式，它结合多个标准来获得单一标准。</p>
</blockquote><a id="more"></a>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现:"></a>实现:</h1><blockquote>
<p>我们将创建一个Person对象、Criteria接口和实现了该接口的实体类，来过滤Person对象的列表。CriteriaPatternDemo，我们的演示类使用Criteria对象，基于各种标准和他们结合来过滤Person对象的列表。</p>
</blockquote>
<img src="/undefined/6526/%E8%BF%87%E6%BB%A4%E5%99%A8%E6%A8%A1%E5%BC%8F.jpg" class title="过滤器模式类UML图">

<h2 id="步骤1："><a href="#步骤1：" class="headerlink" title="步骤1："></a>步骤1：</h2><blockquote>
<p>创建一个类，在该类上应用标准。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Person.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> String gender;</span><br><span class="line">   <span class="keyword">private</span> String maritalStatus;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,String gender,String maritalStatus)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.gender = gender;</span><br><span class="line">      <span class="keyword">this</span>.maritalStatus = maritalStatus;    </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> gender;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getMaritalStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> maritalStatus;</span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤2："><a href="#步骤2：" class="headerlink" title="步骤2："></a>步骤2：</h2><blockquote>
<p>为标准(Criteria)创建一个接口。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Criteria.java*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Criteria</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">meetCriteria</span><span class="params">(List&lt;Person&gt; persons)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤3："><a href="#步骤3：" class="headerlink" title="步骤3："></a>步骤3：</h2><blockquote>
<p>创建实现了Criteria接口的实体类。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*CriteriaMale.java*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CriteriaMale</span> <span class="keyword">implements</span> <span class="title">Criteria</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">meetCriteria</span><span class="params">(List&lt;Person&gt; persons)</span> </span>&#123;</span><br><span class="line">      List&lt;Person&gt; malePersons = <span class="keyword">new</span> ArrayList&lt;Person&gt;(); </span><br><span class="line">      <span class="keyword">for</span> (Person person : persons) &#123;</span><br><span class="line">         <span class="keyword">if</span>(person.getGender().equalsIgnoreCase(<span class="string">"MALE"</span>))&#123;</span><br><span class="line">            malePersons.add(person);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> malePersons;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*CriteriaFemale.java*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CriteriaFemale</span> <span class="keyword">implements</span> <span class="title">Criteria</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">meetCriteria</span><span class="params">(List&lt;Person&gt; persons)</span> </span>&#123;</span><br><span class="line">      List&lt;Person&gt; femalePersons = <span class="keyword">new</span> ArrayList&lt;Person&gt;(); </span><br><span class="line">      <span class="keyword">for</span> (Person person : persons) &#123;</span><br><span class="line">         <span class="keyword">if</span>(person.getGender().equalsIgnoreCase(<span class="string">"FEMALE"</span>))&#123;</span><br><span class="line">            femalePersons.add(person);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> femalePersons;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*CriteriaSingle.java*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CriteriaSingle</span> <span class="keyword">implements</span> <span class="title">Criteria</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">meetCriteria</span><span class="params">(List&lt;Person&gt; persons)</span> </span>&#123;</span><br><span class="line">      List&lt;Person&gt; singlePersons = <span class="keyword">new</span> ArrayList&lt;Person&gt;(); </span><br><span class="line">      <span class="keyword">for</span> (Person person : persons) &#123;</span><br><span class="line">         <span class="keyword">if</span>(person.getMaritalStatus().equalsIgnoreCase(<span class="string">"SINGLE"</span>))&#123;</span><br><span class="line">            singlePersons.add(person);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> singlePersons;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*AndCriteria.java*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AndCriteria</span> <span class="keyword">implements</span> <span class="title">Criteria</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">private</span> Criteria criteria;</span><br><span class="line">   <span class="keyword">private</span> Criteria otherCriteria;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">AndCriteria</span><span class="params">(Criteria criteria, Criteria otherCriteria)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.criteria = criteria;</span><br><span class="line">      <span class="keyword">this</span>.otherCriteria = otherCriteria; </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">meetCriteria</span><span class="params">(List&lt;Person&gt; persons)</span> </span>&#123;</span><br><span class="line">      List&lt;Person&gt; firstCriteriaPersons = criteria.meetCriteria(persons);     </span><br><span class="line">      <span class="keyword">return</span> otherCriteria.meetCriteria(firstCriteriaPersons);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*OrCriteria.java*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrCriteria</span> <span class="keyword">implements</span> <span class="title">Criteria</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">private</span> Criteria criteria;</span><br><span class="line">   <span class="keyword">private</span> Criteria otherCriteria;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">OrCriteria</span><span class="params">(Criteria criteria, Criteria otherCriteria)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.criteria = criteria;</span><br><span class="line">      <span class="keyword">this</span>.otherCriteria = otherCriteria; </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">meetCriteria</span><span class="params">(List&lt;Person&gt; persons)</span> </span>&#123;</span><br><span class="line">      List&lt;Person&gt; firstCriteriaItems = criteria.meetCriteria(persons);</span><br><span class="line">      List&lt;Person&gt; otherCriteriaItems = otherCriteria.meetCriteria(persons);</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">for</span> (Person person : otherCriteriaItems) &#123;</span><br><span class="line">         <span class="keyword">if</span>(!firstCriteriaItems.contains(person))&#123;</span><br><span class="line">           firstCriteriaItems.add(person);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="keyword">return</span> firstCriteriaItems;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤4："><a href="#步骤4：" class="headerlink" title="步骤4："></a>步骤4：</h2><blockquote>
<p>使用不同的标准（Criteria）和它们的结合来过滤 Person 对象的列表。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*CriteriaPatternDemo.java*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList; </span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CriteriaPatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      List&lt;Person&gt; persons = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line"> </span><br><span class="line">      persons.add(<span class="keyword">new</span> Person(<span class="string">"Robert"</span>,<span class="string">"Male"</span>, <span class="string">"Single"</span>));</span><br><span class="line">      persons.add(<span class="keyword">new</span> Person(<span class="string">"John"</span>,<span class="string">"Male"</span>, <span class="string">"Married"</span>));</span><br><span class="line">      persons.add(<span class="keyword">new</span> Person(<span class="string">"Laura"</span>,<span class="string">"Female"</span>, <span class="string">"Married"</span>));</span><br><span class="line">      persons.add(<span class="keyword">new</span> Person(<span class="string">"Diana"</span>,<span class="string">"Female"</span>, <span class="string">"Single"</span>));</span><br><span class="line">      persons.add(<span class="keyword">new</span> Person(<span class="string">"Mike"</span>,<span class="string">"Male"</span>, <span class="string">"Single"</span>));</span><br><span class="line">      persons.add(<span class="keyword">new</span> Person(<span class="string">"Bobby"</span>,<span class="string">"Male"</span>, <span class="string">"Single"</span>));</span><br><span class="line"> </span><br><span class="line">      Criteria male = <span class="keyword">new</span> CriteriaMale();</span><br><span class="line">      Criteria female = <span class="keyword">new</span> CriteriaFemale();</span><br><span class="line">      Criteria single = <span class="keyword">new</span> CriteriaSingle();</span><br><span class="line">      Criteria singleMale = <span class="keyword">new</span> AndCriteria(single, male);</span><br><span class="line">      Criteria singleOrFemale = <span class="keyword">new</span> OrCriteria(single, female);</span><br><span class="line"> </span><br><span class="line">      System.out.println(<span class="string">"Males: "</span>);</span><br><span class="line">      printPersons(male.meetCriteria(persons));</span><br><span class="line"> </span><br><span class="line">      System.out.println(<span class="string">"\nFemales: "</span>);</span><br><span class="line">      printPersons(female.meetCriteria(persons));</span><br><span class="line"> </span><br><span class="line">      System.out.println(<span class="string">"\nSingle Males: "</span>);</span><br><span class="line">      printPersons(singleMale.meetCriteria(persons));</span><br><span class="line"> </span><br><span class="line">      System.out.println(<span class="string">"\nSingle Or Females: "</span>);</span><br><span class="line">      printPersons(singleOrFemale.meetCriteria(persons));</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printPersons</span><span class="params">(List&lt;Person&gt; persons)</span></span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (Person person : persons) &#123;</span><br><span class="line">         System.out.println(<span class="string">"Person : [ Name : "</span> + person.getName() </span><br><span class="line">            +<span class="string">", Gender : "</span> + person.getGender() </span><br><span class="line">            +<span class="string">", Marital Status : "</span> + person.getMaritalStatus()</span><br><span class="line">            +<span class="string">" ]"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="步骤5："><a href="#步骤5：" class="headerlink" title="步骤5："></a>步骤5：</h2><blockquote>
<p>执行程序，输出结果</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Males: </span><br><span class="line">Person : [ Name : Robert, Gender : Male, Marital Status : Single ]</span><br><span class="line">Person : [ Name : John, Gender : Male, Marital Status : Married ]</span><br><span class="line">Person : [ Name : Mike, Gender : Male, Marital Status : Single ]</span><br><span class="line">Person : [ Name : Bobby, Gender : Male, Marital Status : Single ]</span><br><span class="line"></span><br><span class="line">Females: </span><br><span class="line">Person : [ Name : Laura, Gender : Female, Marital Status : Married ]</span><br><span class="line">Person : [ Name : Diana, Gender : Female, Marital Status : Single ]</span><br><span class="line"></span><br><span class="line">Single Males: </span><br><span class="line">Person : [ Name : Robert, Gender : Male, Marital Status : Single ]</span><br><span class="line">Person : [ Name : Mike, Gender : Male, Marital Status : Single ]</span><br><span class="line">Person : [ Name : Bobby, Gender : Male, Marital Status : Single ]</span><br><span class="line"></span><br><span class="line">Single Or Females: </span><br><span class="line">Person : [ Name : Robert, Gender : Male, Marital Status : Single ]</span><br><span class="line">Person : [ Name : Diana, Gender : Female, Marital Status : Single ]</span><br><span class="line">Person : [ Name : Mike, Gender : Male, Marital Status : Single ]</span><br><span class="line">Person : [ Name : Bobby, Gender : Male, Marital Status : Single ]</span><br><span class="line">Person : [ Name : Laura, Gender : Female, Marital Status : Married ]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>桥接模式</title>
    <url>/undefined/43376/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><ol>
<li>桥接(Bridge) 是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，他通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。  </li>
<li>这种模式涉及到一个座位桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。  </li>
<li>下面使用实例来演示桥接模式(Bridge Pattern)的用法。其中，可以使用相同的抽象类方法但是不同的桥接实现类，来画出不同颜色的圆。</li>
</ol>
</blockquote><a id="more"></a>

<h1 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h1><ul>
<li><strong>意图：</strong> 将抽象部分与实际部分分离，使他们都可以独立的变化。</li>
<li><strong>主要解决：</strong> 在有多种可能会变化的情况下，用继承会造成类爆炸问题，扩展起来不灵活。</li>
<li><strong>何时使用：</strong> 实现系统可能有多个角度分类，每一种角度都可能变化。</li>
<li><strong>如何解决：</strong> 把这种多角度分类分离出来，让他们独立变化，减少他们之间耦合。</li>
<li><strong>关键代码：</strong> 抽象类依赖实现类。</li>
<li><strong>应用实例：</strong> </li>
</ul>
<ol>
<li>猪八戒从天蓬元帅转世投胎到猪，转世投胎的机制将尘世划分为两个等级，即：灵魂和肉体，前者相当于抽象化，后者相当于实现化。生灵通过功能的委派，调用肉体对象的功能，使得生灵可以动态地选择。 </li>
<li>墙上的开关，可以看到的开关是抽象的，不用管里面具体怎么实现的。</li>
</ol>
<ul>
<li><strong><em>优点：</em></strong> </li>
</ul>
<ol>
<li>抽象和实现的分离。</li>
<li>优秀的扩展能力。</li>
<li>实现细节对客户透明。</li>
</ol>
<ul>
<li><strong><em>缺点：</em></strong> 桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</li>
<li><strong>使用场景：</strong> </li>
</ul>
<ol>
<li>如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。 </li>
<li>对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。 </li>
<li>一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。</li>
</ol>
<ul>
<li><strong><em>注意事项：</em></strong> 对于两个独立变化的维度，使用桥接模式再适合不过了。</li>
</ul>
<h1 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h1><blockquote class="blockquote-center"><p>我们有一个作为桥接实现的 DrawAPI 接口和实现了 DrawAPI 接口的实体类 RedCircle、GreenCircle。Shape 是一个抽象类，将使用 DrawAPI 的对象。BridgePatternDemo，我们的演示类使用 Shape 类来画出不同颜色的圆。</p>
</blockquote>
<img src="/undefined/43376/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.jpg" class title="桥接模式设计类UML图">
<h2 id="步骤1："><a href="#步骤1：" class="headerlink" title="步骤1："></a>步骤1：</h2><blockquote>
<p>创建桥接实现接口。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*DrawAPI.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DrawAPI</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">(<span class="keyword">int</span> radius, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤2："><a href="#步骤2：" class="headerlink" title="步骤2："></a>步骤2：</h2><blockquote>
<p>创建实现了DrawAPI接口的实体桥接实现类。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*RedCircle.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedCircle</span> <span class="keyword">implements</span> <span class="title">DrawAPI</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">(<span class="keyword">int</span> radius, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Drawing Circle[ color: red, radius: "</span></span><br><span class="line">         + radius +<span class="string">", x: "</span> +x+<span class="string">", "</span>+ y +<span class="string">"]"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*GreenCircle.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreenCircle</span> <span class="keyword">implements</span> <span class="title">DrawAPI</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">(<span class="keyword">int</span> radius, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Drawing Circle[ color: green, radius: "</span></span><br><span class="line">         + radius +<span class="string">", x: "</span> +x+<span class="string">", "</span>+ y +<span class="string">"]"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤3："><a href="#步骤3：" class="headerlink" title="步骤3："></a>步骤3：</h2><blockquote>
<p>使用DrawAPI接口创建抽象类Shape。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Shape.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="keyword">protected</span> DrawAPI drawAPI;</span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="title">Shape</span><span class="params">(DrawAPI drawAPI)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.drawAPI = drawAPI;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤4："><a href="#步骤4：" class="headerlink" title="步骤4："></a>步骤4：</h2><blockquote>
<p>创建实现了Shape接口的实体类。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Circle.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> x, y, radius;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> radius, DrawAPI drawAPI)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(drawAPI);</span><br><span class="line">      <span class="keyword">this</span>.x = x;  </span><br><span class="line">      <span class="keyword">this</span>.y = y;  </span><br><span class="line">      <span class="keyword">this</span>.radius = radius;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      drawAPI.drawCircle(radius,x,y);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤5："><a href="#步骤5：" class="headerlink" title="步骤5："></a>步骤5：</h2><blockquote>
<p>使用Shape和DrawAPI类画出不同颜色的圆。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*BridgePatternDemo.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BridgePatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Shape redCircle = <span class="keyword">new</span> Circle(<span class="number">100</span>,<span class="number">100</span>, <span class="number">10</span>, <span class="keyword">new</span> RedCircle());</span><br><span class="line">      Shape greenCircle = <span class="keyword">new</span> Circle(<span class="number">100</span>,<span class="number">100</span>, <span class="number">10</span>, <span class="keyword">new</span> GreenCircle());</span><br><span class="line"> </span><br><span class="line">      redCircle.draw();</span><br><span class="line">      greenCircle.draw();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤6："><a href="#步骤6：" class="headerlink" title="步骤6："></a>步骤6：</h2><blockquote>
<p>执行程序，输出结果。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Drawing Circle[ color: red, radius: <span class="number">10</span>, x: <span class="number">100</span>, <span class="number">100</span>]</span><br><span class="line">Drawing Circle[  color: green, radius: <span class="number">10</span>, x: <span class="number">100</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure>

<hr>
<blockquote class="blockquote-center"><p><a href="https://www.runoob.com/w3cnote/bridge-pattern2.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/bridge-pattern2.html</a></p>
</blockquote>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>适配器模式</title>
    <url>/undefined/39554/</url>
    <content><![CDATA[<blockquote>
<ol>
<li>适配器模式(Adapter Pattern)是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。  </li>
<li>这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。举个真实的例子，读卡器是作为内存卡和笔记本之间的适配器。您将内存卡插入读卡器，再讲读卡器插入笔记本，这样就可以通过笔记本本来读取内存卡。  </li>
<li>下面通过具体事例来演示适配器模式的使用。其中，音频播放器设备只能播放MP3文件，通过使用一个更高级的音频播放器来播放VLC和MP4文件。</li>
</ol>
</blockquote><a id="more"></a>
<h1 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h1><ul>
<li><strong>意图：</strong> 将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</li>
<li><strong>主要解决：</strong> 主要解决在软件系统中，常常要将一些“现存的对象”放到新的环境中，而新环境要求的接口是现对象不能满足的。</li>
<li><strong>何时使用：</strong> </li>
</ul>
<ol>
<li>系统需要使用现有的类，而此类的接口不符合系统的需要。</li>
<li>想要建立一个可以重复使用的类，用于与一些批次之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作，这些袁磊不一定有一致的接口。</li>
<li>通过接口转换，将一个类插入到另一个类系中。(比如老虎和飞禽，现在多了一个飞虎，在不增加实体的需求下，增加一个适配器，在里面包容一个虎对象，实现非的接口。)</li>
</ol>
<ul>
<li><strong>如何解决：</strong> 继承或依赖(推荐)</li>
<li><strong>关键代码：</strong> 适配器继承或依赖已有的对象，实现想要的目标接口。</li>
<li><strong>应用实例：</strong> </li>
</ul>
<ol>
<li>美国电气110V,中国220V，就要有一个适配器将110V转化为220V。</li>
<li>JAVA JDK1.1提供了Enumeration接口，而在1.2中提供了Iterator接口，想要使用1.2的JDK，则要将以前系统的Enumeration接口转化为Iterator接口，这时就需要适配器模式。</li>
<li>在LINUX上运行WINDOWS程序。</li>
<li>JAVA中的jdbc。</li>
</ol>
<ul>
<li><strong><em>优点：</em></strong> </li>
</ul>
<ol>
<li>可以让任何两个没有关联的类一起运行。</li>
<li>提高了类的复用。</li>
<li>增加了类的透明度。</li>
<li>灵活性好。</li>
</ol>
<ul>
<li><strong><em>缺点：</em></strong></li>
</ul>
<ol>
<li>过多的使用适配器，会让系统非常零乱，不易整体进行把握。比如：明明看到调用的是A接口，其实内部被适配成了B接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不适用适配器，而是直接对系统进行重构。</li>
<li>由于JAVA至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。</li>
</ol>
<ul>
<li><strong>使用场景：</strong> 有动机的修改一个正常运行的系统接口，这时应该考虑使用适配器模式。</li>
<li><strong>注意事项：</strong> 适配器不是在详细设计时添加的，而是解决正在服役的项目的问题。</li>
</ul>
<h1 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h1><blockquote>
<p>我们有一个MediaPlayer接口和一个实现了MediaPlayer接口的实体类AudioPlayer。默认情况下，AudioPlayer可以播放MP3格式的音频文件。<br>我们还有另外一个接口AdvancedMediaPlayer和实现了AdvancedMediaPlayer接口的实体类。该类可以播放VLC和MP4格式的文件。<br>我们想要让AudioPlayer播放其他格式的音频文件。为了实现这个功能，我们需要创建一个实现了MediaPlayer接口的适配器类MediaAdapter.<br>并使用AdvancedMediaPlayer对象来播放所需的格式。  </p>
</blockquote>
<img src="/undefined/39554/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.jpg" class title="适配器模式设计类UML图">

<h2 id="步骤1："><a href="#步骤1：" class="headerlink" title="步骤1："></a>步骤1：</h2><blockquote>
<p>为媒体播放器和更高级的媒体播放器创建接口。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*MediaPlayer.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MediaPlayer</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String audioType, String fileName)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*AdvancedMediaPlayer.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AdvancedMediaPlayer</span> </span>&#123; </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playVlc</span><span class="params">(String fileName)</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playMp4</span><span class="params">(String fileName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤2："><a href="#步骤2：" class="headerlink" title="步骤2："></a>步骤2：</h2><blockquote>
<p>创建实现了AdvancedMediaPlayer接口的实体类。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*VlcPlayer.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VlcPlayer</span> <span class="keyword">implements</span> <span class="title">AdvancedMediaPlayer</span></span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playVlc</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Playing vlc file. Name: "</span>+ fileName);      </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playMp4</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//什么也不做</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Mp4Player.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mp4Player</span> <span class="keyword">implements</span> <span class="title">AdvancedMediaPlayer</span></span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playVlc</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//什么也不做</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playMp4</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Playing mp4 file. Name: "</span>+ fileName);      </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤3："><a href="#步骤3：" class="headerlink" title="步骤3："></a>步骤3：</h2><blockquote>
<p>创建实现了MediaPlayer接口的适配器类。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*MediaAdapter.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MediaAdapter</span> <span class="keyword">implements</span> <span class="title">MediaPlayer</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   AdvancedMediaPlayer advancedMusicPlayer;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">MediaAdapter</span><span class="params">(String audioType)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(audioType.equalsIgnoreCase(<span class="string">"vlc"</span>) )&#123;</span><br><span class="line">         advancedMusicPlayer = <span class="keyword">new</span> VlcPlayer();       </span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (audioType.equalsIgnoreCase(<span class="string">"mp4"</span>))&#123;</span><br><span class="line">         advancedMusicPlayer = <span class="keyword">new</span> Mp4Player();</span><br><span class="line">      &#125;  </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String audioType, String fileName)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(audioType.equalsIgnoreCase(<span class="string">"vlc"</span>))&#123;</span><br><span class="line">         advancedMusicPlayer.playVlc(fileName);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(audioType.equalsIgnoreCase(<span class="string">"mp4"</span>))&#123;</span><br><span class="line">         advancedMusicPlayer.playMp4(fileName);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤4："><a href="#步骤4：" class="headerlink" title="步骤4："></a>步骤4：</h2><blockquote>
<p>创建实现了MediaPlayer接口的实体类。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*AudioPlayer.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AudioPlayer</span> <span class="keyword">implements</span> <span class="title">MediaPlayer</span> </span>&#123;</span><br><span class="line">   MediaAdapter mediaAdapter; </span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String audioType, String fileName)</span> </span>&#123;    </span><br><span class="line"> </span><br><span class="line">      <span class="comment">//播放 mp3 音乐文件的内置支持</span></span><br><span class="line">      <span class="keyword">if</span>(audioType.equalsIgnoreCase(<span class="string">"mp3"</span>))&#123;</span><br><span class="line">         System.out.println(<span class="string">"Playing mp3 file. Name: "</span>+ fileName);         </span><br><span class="line">      &#125; </span><br><span class="line">      <span class="comment">//mediaAdapter 提供了播放其他文件格式的支持</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(audioType.equalsIgnoreCase(<span class="string">"vlc"</span>) </span><br><span class="line">         || audioType.equalsIgnoreCase(<span class="string">"mp4"</span>))&#123;</span><br><span class="line">         mediaAdapter = <span class="keyword">new</span> MediaAdapter(audioType);</span><br><span class="line">         mediaAdapter.play(audioType, fileName);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"Invalid media. "</span>+</span><br><span class="line">            audioType + <span class="string">" format not supported"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤5："><a href="#步骤5：" class="headerlink" title="步骤5："></a>步骤5：</h2><blockquote>
<p>使用 AudioPlayer 来播放不同类型的音频格式。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*AdapterPatternDemo.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterPatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      AudioPlayer audioPlayer = <span class="keyword">new</span> AudioPlayer();</span><br><span class="line">      audioPlayer.play(<span class="string">"mp3"</span>, <span class="string">"beyond the horizon.mp3"</span>);</span><br><span class="line">      audioPlayer.play(<span class="string">"mp4"</span>, <span class="string">"alone.mp4"</span>);</span><br><span class="line">      audioPlayer.play(<span class="string">"vlc"</span>, <span class="string">"far far away.vlc"</span>);</span><br><span class="line">      audioPlayer.play(<span class="string">"avi"</span>, <span class="string">"mind me.avi"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤6："><a href="#步骤6：" class="headerlink" title="步骤6："></a>步骤6：</h2><blockquote>
<p>执行程序，输出结果</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Playing mp3 file. Name: beyond the horizon.mp3</span><br><span class="line">Playing mp4 file. Name: alone.mp4</span><br><span class="line">Playing vlc file. Name: far far away.vlc</span><br><span class="line">Invalid media. avi format not supported</span><br></pre></td></tr></table></figure>
<h1 id="读取SD卡实例："><a href="#读取SD卡实例：" class="headerlink" title="读取SD卡实例："></a>读取SD卡实例：</h1><h2 id="一、模拟计算机读取SD卡："><a href="#一、模拟计算机读取SD卡：" class="headerlink" title="一、模拟计算机读取SD卡："></a>一、模拟计算机读取SD卡：</h2><ol>
<li>先创建一个SD卡的接口：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SDCard</span> </span>&#123;</span><br><span class="line">    <span class="comment">//读取SD卡方法</span></span><br><span class="line">    <span class="function">String <span class="title">readSD</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//写入SD卡功能</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">writeSD</span><span class="params">(String msg)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建SD卡接口的实现类，模拟SD卡的功能：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SDCardImpl</span> <span class="keyword">implements</span> <span class="title">SDCard</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">readSD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String msg = <span class="string">"sdcard read a msg :hello word SD"</span>;</span><br><span class="line">        <span class="keyword">return</span> msg;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">writeSD</span><span class="params">(String msg)</span> </span>&#123;      </span><br><span class="line">        System.out.println(<span class="string">"sd card write msg : "</span> + msg);    </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建计算机接口，计算机提供读取SD卡方法：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Computer</span> </span>&#123;    </span><br><span class="line">    <span class="function">String <span class="title">readSD</span><span class="params">(SDCard sdCard)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建一个计算机实例，实现计算机接口，并实现其读取SD卡方法：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThinkpadComputer</span> <span class="keyword">implements</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">readSD</span><span class="params">(SDCard sdCard)</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">if</span>(sdCard == <span class="keyword">null</span>)<span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"sd card null"</span>);        </span><br><span class="line">        <span class="keyword">return</span> sdCard.readSD();    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>这时候就可以模拟计算机读取SD卡功能：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerReadDemo</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        Computer computer = <span class="keyword">new</span> ThinkpadComputer();        </span><br><span class="line">        SDCard sdCard = <span class="keyword">new</span> SDCardImpl();       </span><br><span class="line">        System.out.println(computer.readSD(sdCard));    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="二、接下来在不改变计算机读取SD卡接口的情况下，通过适配器模式读取TF卡："><a href="#二、接下来在不改变计算机读取SD卡接口的情况下，通过适配器模式读取TF卡：" class="headerlink" title="二、接下来在不改变计算机读取SD卡接口的情况下，通过适配器模式读取TF卡："></a>二、接下来在不改变计算机读取SD卡接口的情况下，通过适配器模式读取TF卡：</h2><ol>
<li>创建TF卡接口：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TFCard</span> </span>&#123;    </span><br><span class="line">    <span class="function">String <span class="title">readTF</span><span class="params">()</span></span>;    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">writeTF</span><span class="params">(String msg)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建TF卡实例：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TFCardImpl</span> <span class="keyword">implements</span> <span class="title">TFCard</span> </span>&#123;    </span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">readTF</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">        String msg =<span class="string">"tf card reade msg : hello word tf card"</span>;        </span><br><span class="line">        <span class="keyword">return</span> msg;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">writeTF</span><span class="params">(String msg)</span> </span>&#123;        </span><br><span class="line">        System.out.println(<span class="string">"tf card write a msg : "</span> + msg);        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建SD适配TF （也可以说是SD兼容TF，相当于读卡器）：<br>实现SDCard接口，并将要适配的对象作为适配器的属性引入。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SDAdapterTF</span> <span class="keyword">implements</span> <span class="title">SDCard</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">private</span> TFCard tfCard;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SDAdapterTF</span><span class="params">(TFCard tfCard)</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">this</span>.tfCard = tfCard;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">readSD</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">        System.out.println(<span class="string">"adapter read tf card "</span>);        </span><br><span class="line">        <span class="keyword">return</span> tfCard.readTF();    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">writeSD</span><span class="params">(String msg)</span> </span>&#123;        </span><br><span class="line">        System.out.println(<span class="string">"adapter write tf card"</span>);        </span><br><span class="line">        <span class="keyword">return</span> tfCard.writeTF(msg);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>通过上面的例子测试计算机通过SD读卡器读取TF卡：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerReadDemo</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        Computer computer = <span class="keyword">new</span> ThinkpadComputer();        </span><br><span class="line">        SDCard sdCard = <span class="keyword">new</span> SDCardImpl();        </span><br><span class="line">        System.out.println(computer.readSD(sdCard));        </span><br><span class="line">        System.out.println(<span class="string">"===================================="</span>);        </span><br><span class="line">        TFCard tfCard = <span class="keyword">new</span> TFCardImpl();        </span><br><span class="line">        SDCard tfCardAdapterSD = <span class="keyword">new</span> SDAdapterTF(tfCard);        </span><br><span class="line">        System.out.println(computer.readSD(tfCardAdapterSD));    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sdcard read a msg :hello word SD</span><br><span class="line">====================================</span><br><span class="line">adapter read tf card </span><br><span class="line">tf card reade msg : hello word tf card</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在这种模式下，计算机并不需要知道具体是什么卡，只需要负责操作接口即可，具体操作的什么类，由适配器决定。</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>原型模式</title>
    <url>/undefined/22548/</url>
    <content><![CDATA[<blockquote>
<p>原型模式(Prototype Pattern)用于创建重复的对象，同时又能保证性能，这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。例如，一个对象需要在一个高代价的数据库操作之后被创建爱你，我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用。</p>
</blockquote><a id="more"></a>
<h1 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h1><ul>
<li><strong>意图：</strong> 用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</li>
<li><strong>主要解决：</strong> 在运行期建立和删除原型。</li>
<li><strong>何时使用：</strong> </li>
</ul>
<ol>
<li>当一个系统应该独立于它的产品创建，构成和表示时。</li>
<li>当要实例化的类是在运行时刻指定时，例如，通过动态装载。</li>
<li>为了避免创建一个与产品类层次平行的工厂类层次时。</li>
<li>当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆他们可能比每次用合适的状态手工实例化该类更方便一些。</li>
</ol>
<ul>
<li><strong>如何解决：</strong> 利用已有的一个原型对象，快速地生成和原型对象一样的实例。</li>
<li><strong>关键代码：</strong> </li>
</ul>
<ol>
<li>实现克隆操作，在Java继承Cloneable，重写clone()，在.NET中可以使用Object类的MemberwiseClone()方法来实现对象的浅拷贝或通过序列化的方式来实现深拷贝。</li>
<li>原型模式同样用于隔离类对象的使用者和具体类型(易变类)之间的耦合关系，它同样要求这些“易变类”拥有稳定的接口。</li>
</ol>
<ul>
<li><strong>应用实例：</strong></li>
</ul>
<ol>
<li>细胞分裂。</li>
<li>Java中的Object clone()方法。</li>
</ol>
<ul>
<li><strong><em>优点：</em></strong> </li>
</ul>
<ol>
<li>性能提高。</li>
<li>逃避构造函数的约束。</li>
</ol>
<ul>
<li><strong><em>缺点：</em></strong> </li>
</ul>
<ol>
<li>配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。</li>
<li>必须实现Cloneable接口。</li>
</ol>
<ul>
<li><strong>使用场景</strong></li>
</ul>
<ol>
<li>资源优化场景。</li>
<li>类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等。</li>
<li>性能和安全要求的场景。 </li>
<li>通过 new 产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。</li>
<li>一个对象多个修改者的场景。</li>
<li>一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用。</li>
<li>在实际项目中，原型模式很少单独出现，一般是和工厂方法模式一起出现，通过 clone 的方法创建一个对象，然后由工厂方法提供给调用者。原型模式已经与 Java 融为浑然一体，大家可以随手拿来使用。</li>
</ol>
<ul>
<li><strong>注意事项：</strong> 与通过对一个类进行实例化来构造新对象不同的是，原型模式是通过拷贝一个现有对象生成新对象的。浅拷贝实现 Cloneable，重写，深拷贝是通过实现 Serializable 读取二进制流。</li>
</ul>
<h1 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h1><blockquote>
<p>我们将创建一个抽象类 Shape 和扩展了 Shape 类的实体类。下一步是定义类 ShapeCache，该类把 shape 对象存储在一个 Hashtable 中，并在请求的时候返回它们的克隆。<br>PrototypePatternDemo，我们的演示类使用 ShapeCache 类来获取 Shape 对象。</p>
</blockquote>
<img src="/undefined/22548/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.jpg" class title="原型模式设计类UML图">

<h2 id="步骤1："><a href="#步骤1：" class="headerlink" title="步骤1："></a>步骤1：</h2><blockquote>
<p>创建一个实现了Cloneable</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Shape.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> String id;</span><br><span class="line">   <span class="keyword">protected</span> String type;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> type;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> id;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.id = id;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Object clone = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         clone = <span class="keyword">super</span>.clone();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> clone;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤2："><a href="#步骤2：" class="headerlink" title="步骤2："></a>步骤2：</h2><blockquote>
<p>创建扩展了上面抽象类的实体类。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Rectangle.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">()</span></span>&#123;</span><br><span class="line">     type = <span class="string">"Rectangle"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Inside Rectangle::draw() method."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Square.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Square</span><span class="params">()</span></span>&#123;</span><br><span class="line">     type = <span class="string">"Square"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Inside Square::draw() method."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Circle.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">()</span></span>&#123;</span><br><span class="line">     type = <span class="string">"Circle"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Inside Circle::draw() method."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤3："><a href="#步骤3：" class="headerlink" title="步骤3："></a>步骤3：</h2><blockquote>
<p>创建一个类，从数据库获取实体类，并把他们存储在一个Hashtable中。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*ShapeCache.java*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeCache</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Hashtable&lt;String, Shape&gt; shapeMap </span><br><span class="line">      = <span class="keyword">new</span> Hashtable&lt;String, Shape&gt;();</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Shape <span class="title">getShape</span><span class="params">(String shapeId)</span> </span>&#123;</span><br><span class="line">      Shape cachedShape = shapeMap.get(shapeId);</span><br><span class="line">      <span class="keyword">return</span> (Shape) cachedShape.clone();</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 对每种形状都运行数据库查询，并创建该形状</span></span><br><span class="line">   <span class="comment">// shapeMap.put(shapeKey, shape);</span></span><br><span class="line">   <span class="comment">// 例如，我们要添加三种形状</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Circle circle = <span class="keyword">new</span> Circle();</span><br><span class="line">      circle.setId(<span class="string">"1"</span>);</span><br><span class="line">      shapeMap.put(circle.getId(),circle);</span><br><span class="line"> </span><br><span class="line">      Square square = <span class="keyword">new</span> Square();</span><br><span class="line">      square.setId(<span class="string">"2"</span>);</span><br><span class="line">      shapeMap.put(square.getId(),square);</span><br><span class="line"> </span><br><span class="line">      Rectangle rectangle = <span class="keyword">new</span> Rectangle();</span><br><span class="line">      rectangle.setId(<span class="string">"3"</span>);</span><br><span class="line">      shapeMap.put(rectangle.getId(),rectangle);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤4："><a href="#步骤4：" class="headerlink" title="步骤4："></a>步骤4：</h2><blockquote>
<p>PrototypePatternDemo 使用 ShapeCache 类来获取存储在 Hashtable 中的形状的克隆。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*PrototypePatternDemo.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrototypePatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      ShapeCache.loadCache();</span><br><span class="line"> </span><br><span class="line">      Shape clonedShape = (Shape) ShapeCache.getShape(<span class="string">"1"</span>);</span><br><span class="line">      System.out.println(<span class="string">"Shape : "</span> + clonedShape.getType());        </span><br><span class="line"> </span><br><span class="line">      Shape clonedShape2 = (Shape) ShapeCache.getShape(<span class="string">"2"</span>);</span><br><span class="line">      System.out.println(<span class="string">"Shape : "</span> + clonedShape2.getType());        </span><br><span class="line"> </span><br><span class="line">      Shape clonedShape3 = (Shape) ShapeCache.getShape(<span class="string">"3"</span>);</span><br><span class="line">      System.out.println(<span class="string">"Shape : "</span> + clonedShape3.getType());        </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="步骤5"><a href="#步骤5" class="headerlink" title="步骤5"></a>步骤5</h2><blockquote>
<p>执行程序，输出结果</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Shape : Circle</span><br><span class="line">Shape : Square</span><br><span class="line">Shape : Rectangle</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown基础语法</title>
    <url>/undefined/39418/</url>
    <content><![CDATA[<h1 id="标题："><a href="#标题：" class="headerlink" title="标题："></a>标题：</h1><h2 id="使用-和-标记一级和二级标题："><a href="#使用-和-标记一级和二级标题：" class="headerlink" title="使用=和-标记一级和二级标题："></a>使用<code>=</code>和<code>-</code>标记一级和二级标题：</h2><blockquote>
<p>=和-的使用语法格式如下：  </p>
</blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一级标题语法：在标题文字的下一行加上： ===============</span><br></pre></td></tr></table></figure><a id="more"></a>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">二级标题语法：在标题文字的下一行加上：-----</span><br></pre></td></tr></table></figure>
<p>效果如下：  </p>
<h2 id="使用-号标记"><a href="#使用-号标记" class="headerlink" title="使用#号标记"></a>使用#号标记</h2><blockquote>
<p>使用<code>#</code>号可表示1-6级标题，一级标题对应一个<code>#</code>号，二级标题对应两个<code>#</code>号，以此类推。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure>

<h1 id="文字："><a href="#文字：" class="headerlink" title="文字："></a>文字：</h1><h2 id="段落："><a href="#段落：" class="headerlink" title="段落："></a>段落：</h2><blockquote>
<ul>
<li>Markdown段落没有特殊的格式，直接编写文字就可以，<strong>段落的换行是使用两个以上的空格加上回车。</strong></li>
<li>当然也可以在段落后面使用一个空行来表示重新开始一个段落。</li>
</ul>
</blockquote>
<h2 id="字体："><a href="#字体：" class="headerlink" title="字体："></a>字体：</h2><p>Markdown 可以使用一下几种字体：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*斜体文本*</span><br><span class="line">_斜体文本_</span><br><span class="line">**粗体文本**</span><br><span class="line">__粗体文本__</span><br><span class="line">***粗斜体文本***</span><br><span class="line">___粗斜体文本___</span><br></pre></td></tr></table></figure>
<p>效果如下：<br><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><strong><em>粗斜体文本</em></strong><br><strong><em>粗斜体文本</em></strong>  </p>
<h2 id="分隔线："><a href="#分隔线：" class="headerlink" title="分隔线："></a>分隔线：</h2><p>可以在一行中用三个以上的星号、减号、底线来建立一个分割线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。示例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">***</span><br><span class="line">* * *</span><br><span class="line">*****</span><br><span class="line">- - -</span><br><span class="line">______</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<hr>
<hr>
<hr>
<hr>
<hr>
<h2 id="删除线："><a href="#删除线：" class="headerlink" title="删除线："></a>删除线：</h2><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线<code>~~</code>即可，示例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abc</span><br><span class="line">~~bdcd~~</span><br></pre></td></tr></table></figure>
<p>效果如下：<br>abc<br><del>bdcd</del>  </p>
<h2 id="下划线："><a href="#下划线：" class="headerlink" title="下划线："></a>下划线：</h2><p>下划线可以通过HTML的<code>&lt;u&gt;</code>标签来实现,示例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;u&gt;测试下划线&lt;u&gt;</span><br></pre></td></tr></table></figure>
<p>效果如下：<br><u>测试下划线<u></u></u></p>
<h2 id="脚注："><a href="#脚注：" class="headerlink" title="脚注："></a>脚注：</h2><p>脚注是对文本的补充说明。Markdown脚注的格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[^要注明的文本]</span><br></pre></td></tr></table></figure>
<p>演示用法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建脚注格式类似这样[^测试]</span><br><span class="line">[^测试]:这是一个脚注测试。</span><br></pre></td></tr></table></figure>
<p>具体效果如下：<br>创建脚注格式类似这样 <a href="这是一个脚注测试。">^sun</a> 。</p>
<h1 id="列表："><a href="#列表：" class="headerlink" title="列表："></a>列表：</h1><p>Markdown支持有序列表和无序列表。</p>
<h2 id="无序列表："><a href="#无序列表：" class="headerlink" title="无序列表："></a>无序列表：</h2><blockquote>
<p>使用星号<code>(*)</code>、加好<code>(+)</code>或是减号<code>(-)</code>作为列表标记：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">* 第二项</span><br><span class="line">* 第三项</span><br><span class="line"></span><br><span class="line">+ 第一项</span><br><span class="line">+ 第二项</span><br><span class="line">+ 第三项</span><br><span class="line"></span><br><span class="line">- 第一项</span><br><span class="line">- 第二项</span><br><span class="line">- 第三项</span><br></pre></td></tr></table></figure>
<h2 id="有序列表："><a href="#有序列表：" class="headerlink" title="有序列表："></a>有序列表：</h2><blockquote>
<p>使用数字并加上<code>.</code>号来表示，如下：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br><span class="line">3. 第三项</span><br></pre></td></tr></table></figure>
<p>效果如下：  </p>
<ol>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ol>
<h1 id="列表嵌套："><a href="#列表嵌套：" class="headerlink" title="列表嵌套："></a>列表嵌套：</h1><blockquote>
<p>列表嵌套只需在子列表中的选项添加四个空格即可：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 第一项：</span><br><span class="line">    - 第一项嵌套的第一个元素</span><br><span class="line">    - 第一项嵌套的第二个元素</span><br><span class="line">2. 第二项：</span><br><span class="line">    - 第二项嵌套的第一个元素</span><br><span class="line">    - 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure>
<p>显示结果如下：  </p>
<ol>
<li>第一项：<ul>
<li>第一项嵌套的第一个元素</li>
<li>第一项嵌套的第二个元素</li>
</ul>
</li>
<li>第二项：<ul>
<li>第二项嵌套的第一个元素</li>
<li>第二项嵌套的第二个元素</li>
</ul>
</li>
</ol>
<h1 id="区块："><a href="#区块：" class="headerlink" title="区块："></a>区块：</h1><h2 id="单区块"><a href="#单区块" class="headerlink" title="单区块"></a>单区块</h2><blockquote>
<p>Markdown区块引用是在段落开头使用<code>&gt;</code> 符号，然后后面紧跟一个<strong>空格</strong>符号：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 区块引用</span><br><span class="line">&gt; 菜鸟教程</span><br><span class="line">&gt; 学的不仅是技术更是梦想</span><br></pre></td></tr></table></figure>
<p>显示结果如下：</p>
<blockquote>
<p>区块引用<br>菜鸟教程<br>学的不仅是技术更是梦想  </p>
</blockquote>
<h2 id="区块嵌套："><a href="#区块嵌套：" class="headerlink" title="区块嵌套："></a>区块嵌套：</h2><p>另外区块是可以嵌套的，一个<code>&gt;</code>符号是最外层，两个<code>&gt;</code>符号是第一层嵌套，以此类推：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 最外层</span><br><span class="line">&gt; &gt; 第一层嵌套</span><br><span class="line">&gt; &gt; &gt; 第二层嵌套</span><br></pre></td></tr></table></figure>
<p>显示结果如下：</p>
<blockquote>
<p>最外层</p>
<blockquote>
<p>第一层嵌套</p>
<blockquote>
<p>第二层嵌套</p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="区块中使用列表："><a href="#区块中使用列表：" class="headerlink" title="区块中使用列表："></a>区块中使用列表：</h2><p>语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 区块中使用列表</span><br><span class="line">&gt; 1. 第一项</span><br><span class="line">&gt; 2. 第二项</span><br><span class="line">&gt; + 第一项</span><br><span class="line">&gt; + 第二项</span><br><span class="line">&gt; + 第三项</span><br></pre></td></tr></table></figure>
<p>显示效果如下：</p>
<blockquote>
<p>区块中使用列表</p>
<ol>
<li>第一项</li>
<li>第二项</li>
</ol>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
</blockquote>
<h2 id="列表中使用区块："><a href="#列表中使用区块：" class="headerlink" title="列表中使用区块："></a>列表中使用区块：</h2><p>如果要在列表项目中放进区块，那么久需要在<code>&gt;</code>前添加四个空格的缩进。区块中使用列表语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">    &gt; 菜鸟教程</span><br><span class="line">    &gt; 学的不仅是技术更是梦想</span><br><span class="line">* 第二项</span><br></pre></td></tr></table></figure>
<p>显示效果如下：</p>
<ul>
<li>第一项<blockquote>
<p>菜鸟教程<br>学的不仅是技术更是梦想</p>
</blockquote>
</li>
<li>第二项</li>
</ul>
<h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><h2 id="段落上的代码："><a href="#段落上的代码：" class="headerlink" title="段落上的代码："></a>段落上的代码：</h2><blockquote>
<p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来<code>(`)</code>,具体如下：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">`printf()` 函数</span><br></pre></td></tr></table></figure>
<p>显示结果如下：<br><code>printf()</code> 函数</p>
<h2 id="代码区块："><a href="#代码区块：" class="headerlink" title="代码区块："></a>代码区块：</h2><blockquote>
<p>代码区块使用4个空格或者一个制表符(Tab键)。  </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abcdise</span><br></pre></td></tr></table></figure>
<p>显示结果如下：</p>
<pre><code>abcdise</code></pre><h2 id="指定语言的代码区块："><a href="#指定语言的代码区块：" class="headerlink" title="指定语言的代码区块："></a>指定语言的代码区块：</h2><blockquote>
<p>可以用<code>(```)</code>包裹一段代码，并指定一种语言(也可以不指定)：  </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* ```javascript</span><br><span class="line">$(document).ready(function () &#123;</span><br><span class="line">    alert(&apos;RUNOOB&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"> ```*/</span><br></pre></td></tr></table></figure>
<p>显示结果如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'RUNOOB'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="Markdown链接"><a href="#Markdown链接" class="headerlink" title="Markdown链接"></a>Markdown链接</h1><h2 id="普通链接"><a href="#普通链接" class="headerlink" title="普通链接"></a>普通链接</h2><blockquote>
<p>链接使用方法如下：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[链接名称](链接地址)</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">&lt;链接地址&gt;</span><br><span class="line">示例为：  这是一个链接 [百度](https:<span class="comment">//www.baidu.com)</span></span><br><span class="line"></span><br><span class="line">直接使用链接地址：&lt;https:<span class="comment">//www.baidu.com&gt;</span></span><br></pre></td></tr></table></figure>
<p>显示结果如下：  </p>
<ul>
<li>这是一个链接 <a href="https://www.baidu.com" target="_blank" rel="noopener">百度</a>  </li>
<li><a href="https://www.baidu.com" target="_blank" rel="noopener">https://www.baidu.com</a></li>
</ul>
<h2 id="高级链接："><a href="#高级链接：" class="headerlink" title="高级链接："></a>高级链接：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">链接也可以用变量来代替，文档末尾附带变量地址：</span><br><span class="line">这个链接用 1 作为网址变量 [Google][1]</span><br><span class="line">这个链接用 runoob 作为网址变量 [Runoob][runoob]</span><br><span class="line">然后在文档的结尾为变量赋值（网址）</span><br><span class="line"></span><br><span class="line">  [1]: http://www.google.com/</span><br><span class="line">  [runoob]: http://www.runoob.com/</span><br></pre></td></tr></table></figure>

<p>显示结果如下：<br>链接也可以用变量来代替，文档末尾附带变量地址：<br>这个链接用 1 作为网址变量 <a href="http://www.google.com/" target="_blank" rel="noopener">Google</a><br>这个链接用 runoob 作为网址变量 <a href="http://www.runoob.com/" target="_blank" rel="noopener">Runoob</a><br>然后在文档的结尾为变量赋值（网址）</p>
<h1 id="图片："><a href="#图片：" class="headerlink" title="图片："></a>图片：</h1><p>Markdown图片格式如下：  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![alt 属性文本](图片地址)</span><br><span class="line"></span><br><span class="line">![alt 属性文本](图片地址 &quot;可选标题&quot;)</span><br></pre></td></tr></table></figure>

<ul>
<li>开头一个感叹号 !</li>
<li>接着一个方括号，里面放上图片的替代文字</li>
<li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![abc 图标](http://www.baidu.com/abc.png)</span><br><span class="line"></span><br><span class="line">![abc 图标](http://www.baidu.com/abc.png &quot;abc&quot;)</span><br></pre></td></tr></table></figure>
<p>也可以像网址那样对图片网址使用变量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这个链接用 1 作为网址变量 [abc][1].</span><br><span class="line">然后在文档的结尾位变量赋值（网址）</span><br><span class="line"></span><br><span class="line">[1]: http://www.baidu.com/abc.png</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong> Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <img> 标签。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;http://www.baidu.com/abc.png&quot; width=&quot;50%&quot;&gt;</span><br></pre></td></tr></table></figure>

<h1 id="Markdown表格："><a href="#Markdown表格：" class="headerlink" title="Markdown表格："></a>Markdown表格：</h1><h2 id="表格形式："><a href="#表格形式：" class="headerlink" title="表格形式："></a>表格形式：</h2><blockquote>
<p>Markdown制作表格使用<code>|</code>来分隔不同的单元格，使用<code>-</code>来分隔表头和其他行。语法如下：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure>
<p>显示如下：<br>|  表头   | 表头  |<br>|  —-  | —-  |<br>| 单元格  | 单元格 |<br>| 单元格  | 单元格 |</p>
<h2 id="对齐方式："><a href="#对齐方式：" class="headerlink" title="对齐方式："></a>对齐方式：</h2><p>我们可以设置表格的对齐方式：</p>
<ul>
<li><code>-:</code> 设置内容和标题栏居右对齐。</li>
<li><code>:-</code> 设置内容和标题栏居左对齐。</li>
<li><code>:-:</code> 设置内容和标题栏居中对齐。<br>语法示例如下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure>
显示结果如下：  <table>
<thead>
<tr>
<th align="left">左对齐</th>
<th align="right">右对齐</th>
<th align="center">居中对齐</th>
</tr>
</thead>
<tbody><tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
<tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
</tbody></table>
</li>
</ul>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>工具语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown总述</title>
    <url>/undefined/56456/</url>
    <content><![CDATA[<h1 id="Markdown总体："><a href="#Markdown总体：" class="headerlink" title="Markdown总体："></a>Markdown总体：</h1><blockquote>
<p>Markdown是一种轻量级标记语言，它允许使用易读易写的纯文本格式编写文档。</p>
</blockquote><a id="more"></a>
<blockquote>
<p>Markdown语言在2004年有约翰格鲁伯(英语：John Gruber)创建。</p>
</blockquote>
<blockquote>
<p>Markdown编写的文档可以到处HTML、Word、图像、PDF、Epub等多种格式的文档。编写出来的文档后缀为.md,.markdown。</p>
</blockquote>
<h1 id="Markdown应用："><a href="#Markdown应用：" class="headerlink" title="Markdown应用："></a>Markdown应用：</h1><p>可以被使用来撰写电子书，如Gitbook;<br>当前许多网站都广泛使用Markdown来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、reddit、Diaspora、Stack Exchange、OpenStreetMap、SourceForge等。</p>
<h1 id="简单分类："><a href="#简单分类：" class="headerlink" title="简单分类："></a>简单分类：</h1><ul>
<li><strong>基础语法：</strong> <a href="/undefined/39418/" title="Markdown基础语法">Markdown基础语法</a></li>
<li><strong>公式：</strong></li>
<li><strong>画图：</strong></li>
</ul>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>工具语言</tag>
      </tags>
  </entry>
  <entry>
    <title>建造者模式</title>
    <url>/undefined/29711/</url>
    <content><![CDATA[<blockquote>
<p>建造者模式(Builder Pattern) 使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，他提供了一种创建对象的最佳方式。</p>
</blockquote><a id="more"></a>
<blockquote>
<p>一个Builder类会一步一步构造最终的对象。该Builder类是独立于其他对象的。</p>
</blockquote>
<h1 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h1><ul>
<li><strong>意图：</strong> 将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。</li>
<li><strong>主要解决：</strong> 主要解决在软件系统中，有时候面临着“一个复杂对象”的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将他们组合在一起的算法却相对稳定。</li>
<li><strong>何时使用：</strong> 一些基本部件不会变，而其组合经常变化的时候。</li>
<li><strong>如何解决：</strong> 将变与不变分离开。</li>
<li><strong>关键代码：</strong> 建造者：创建和提供实例，导演：管理建造出来的实例的依赖关系。</li>
<li><strong>应用实例：</strong> <blockquote>
<p>1.去肯德基，汉堡、可乐、薯条、炸鸡翅等是不变的，而其组合是经常变化的，生成出所谓的“套餐”。2.Java中的StringBuilder。</p>
</blockquote>
</li>
<li><strong><em>优点：</em></strong> 1、建造者独立，易扩展。<br>2、便于控制细节风险。</li>
<li><strong><em>缺点：</em></strong> 1、产品必须有共同点，范围有限制。<br>2、如内部变化复杂，会有很多的建造类。</li>
<li><strong>使用场景：</strong> 需要生成的对象具有复杂的内部结构;需要生成的对象内部属性本身相互依赖。</li>
<li><strong>注意事项：</strong> 与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。<h1 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h1><blockquote>
<p>我们假设一个快餐店的商业案例，其中，一个典型的套餐可以是一个汉堡（Burger）和一杯冷饮（Cold drink）。汉堡（Burger）可以是素食汉堡（Veg Burger）或鸡肉汉堡（Chicken Burger），它们是包在纸盒中。冷饮（Cold drink）可以是可口可乐（coke）或百事可乐（pepsi），它们是装在瓶子中。<br>我们将创建一个表示食物条目（比如汉堡和冷饮）的 Item 接口和实现 Item 接口的实体类，以及一个表示食物包装的 Packing 接口和实现 Packing 接口的实体类，汉堡是包在纸盒中，冷饮是装在瓶子中。<br>然后我们创建一个 Meal 类，带有 Item 的 ArrayList 和一个通过结合 Item 来创建不同类型的 Meal 对象的 MealBuilder。BuilderPatternDemo，我们的演示类使用 MealBuilder 来创建一个 Meal。</p>
</blockquote>
<img src="/undefined/29711/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F.jpg" class title="建造者模式设计类UML图">
<h2 id="步骤1："><a href="#步骤1：" class="headerlink" title="步骤1："></a>步骤1：</h2><blockquote>
<p>创建一个表示食物条目和食物包装的接口。</p>
</blockquote>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Item.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Packing <span class="title">packing</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">price</span><span class="params">()</span></span>;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Packing.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Packing</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">pack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="步骤2："><a href="#步骤2：" class="headerlink" title="步骤2："></a>步骤2：</h2><blockquote>
<p>创建实现Packing接口的实体类。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Wrapper.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wrapper</span> <span class="keyword">implements</span> <span class="title">Packing</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">pack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Wrapper"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Bottle.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bottle</span> <span class="keyword">implements</span> <span class="title">Packing</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">pack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Bottle"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤3："><a href="#步骤3：" class="headerlink" title="步骤3："></a>步骤3：</h2><blockquote>
<p>创建实现Item接口的抽象类，该类提供了默认的功能。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Burger.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Burger</span> <span class="keyword">implements</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Packing <span class="title">packing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Wrapper();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">float</span> <span class="title">price</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*ColdDrink.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ColdDrink</span> <span class="keyword">implements</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Packing <span class="title">packing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Bottle();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">float</span> <span class="title">price</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="步骤4："><a href="#步骤4：" class="headerlink" title="步骤4："></a>步骤4：</h2><blockquote>
<p>创建扩展了Burger和ColdDrink的实体类。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*VegBurger.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VegBurger</span> <span class="keyword">extends</span> <span class="title">Burger</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">price</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">25.0f</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Veg Burger"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*ChickenBurger.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChickenBurger</span> <span class="keyword">extends</span> <span class="title">Burger</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">price</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">50.5f</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Chicken Burger"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Coke.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coke</span> <span class="keyword">extends</span> <span class="title">ColdDrink</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">price</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">30.0f</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Coke"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Pepsi.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pepsi</span> <span class="keyword">extends</span> <span class="title">ColdDrink</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">price</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">35.0f</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Pepsi"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤5："><a href="#步骤5：" class="headerlink" title="步骤5："></a>步骤5：</h2><blockquote>
<p>创建一个Meal类，带有上面定义的Item对象。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Meal.java*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Meal</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> List&lt;Item&gt; items = <span class="keyword">new</span> ArrayList&lt;Item&gt;();    </span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addItem</span><span class="params">(Item item)</span></span>&#123;</span><br><span class="line">      items.add(item);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getCost</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">float</span> cost = <span class="number">0.0f</span>;</span><br><span class="line">      <span class="keyword">for</span> (Item item : items) &#123;</span><br><span class="line">         cost += item.price();</span><br><span class="line">      &#125;        </span><br><span class="line">      <span class="keyword">return</span> cost;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showItems</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (Item item : items) &#123;</span><br><span class="line">         System.out.print(<span class="string">"Item : "</span>+item.name());</span><br><span class="line">         System.out.print(<span class="string">", Packing : "</span>+item.packing().pack());</span><br><span class="line">         System.out.println(<span class="string">", Price : "</span>+item.price());</span><br><span class="line">      &#125;        </span><br><span class="line">   &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤6："><a href="#步骤6：" class="headerlink" title="步骤6："></a>步骤6：</h2><blockquote>
<p>创建一个MealBuilder类，实际的builder类负责创建Meal对象。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*MealBuilder.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MealBuilder</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Meal <span class="title">prepareVegMeal</span> <span class="params">()</span></span>&#123;</span><br><span class="line">      Meal meal = <span class="keyword">new</span> Meal();</span><br><span class="line">      meal.addItem(<span class="keyword">new</span> VegBurger());</span><br><span class="line">      meal.addItem(<span class="keyword">new</span> Coke());</span><br><span class="line">      <span class="keyword">return</span> meal;</span><br><span class="line">   &#125;   </span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Meal <span class="title">prepareNonVegMeal</span> <span class="params">()</span></span>&#123;</span><br><span class="line">      Meal meal = <span class="keyword">new</span> Meal();</span><br><span class="line">      meal.addItem(<span class="keyword">new</span> ChickenBurger());</span><br><span class="line">      meal.addItem(<span class="keyword">new</span> Pepsi());</span><br><span class="line">      <span class="keyword">return</span> meal;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤7"><a href="#步骤7" class="headerlink" title="步骤7:"></a>步骤7:</h2><blockquote>
<p>BuilderPatternDemo使用MealBuilder来演示建造者模式(Builder Pattern).</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*BuilderPatternDemo.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuilderPatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      MealBuilder mealBuilder = <span class="keyword">new</span> MealBuilder();</span><br><span class="line"> </span><br><span class="line">      Meal vegMeal = mealBuilder.prepareVegMeal();</span><br><span class="line">      System.out.println(<span class="string">"Veg Meal"</span>);</span><br><span class="line">      vegMeal.showItems();</span><br><span class="line">      System.out.println(<span class="string">"Total Cost: "</span> +vegMeal.getCost());</span><br><span class="line"> </span><br><span class="line">      Meal nonVegMeal = mealBuilder.prepareNonVegMeal();</span><br><span class="line">      System.out.println(<span class="string">"\n\nNon-Veg Meal"</span>);</span><br><span class="line">      nonVegMeal.showItems();</span><br><span class="line">      System.out.println(<span class="string">"Total Cost: "</span> +nonVegMeal.getCost());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>#步骤8：</p>
<blockquote>
<p>执行程序，输出结果：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Veg Meal</span><br><span class="line">Item : Veg Burger, Packing : Wrapper, Price : <span class="number">25.0</span></span><br><span class="line">Item : Coke, Packing : Bottle, Price : <span class="number">30.0</span></span><br><span class="line">Total Cost: <span class="number">55.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Non-Veg Meal</span><br><span class="line">Item : Chicken Burger, Packing : Wrapper, Price : <span class="number">50.5</span></span><br><span class="line">Item : Pepsi, Packing : Bottle, Price : <span class="number">35.0</span></span><br><span class="line">Total Cost: <span class="number">85.5</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/undefined/46132/</url>
    <content><![CDATA[<blockquote>
<p>单例模式(Singleton Pattern) 是Java中最简单的设计模式之一，这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建，这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>
</blockquote><a id="more"></a>
<blockquote>
<p><strong><em>注意</em></strong></p>
<ul>
<li>单例只能有一个实例。</li>
<li>单例类必须自己创建自己的唯一实例。</li>
<li>单例类必须给所有其他对象提供这一实例。</li>
</ul>
</blockquote>
<h1 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h1><ul>
<li><p><strong>意图：</strong> 保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>
</li>
<li><p><strong>主要解决：</strong> 一个全局使用的类频繁地创建与销毁。</p>
</li>
<li><p><strong>何时使用：</strong> 当你想控制实例数目，节省系统资源的实践。</p>
</li>
<li><p><strong>如何解决：</strong> 判断系统是否已经有这个单例，如果有则返回，如果没有则创建。</p>
</li>
<li><p><strong>关键代码：</strong> 构造函数是私有的。</p>
</li>
<li><p><strong>应用实例：</strong></p>
<blockquote>
<ul>
<li>一个班级只有一个班主任。</li>
<li>Windows是多进程多线程，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。</li>
<li>一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。</li>
</ul>
</blockquote>
</li>
<li><p><strong><em>优点：</em></strong></p>
<blockquote>
<ul>
<li>在内存里只有一个实例，减少内存的开销，尤其是频繁的创建和销毁实例(比如管理学院首页页面缓存).</li>
<li>避免对资源的多重占用(比如写文件操作)。</li>
</ul>
</blockquote>
</li>
<li><p><strong><em>缺点：</em></strong> 没有接口，不能继承，与单一职责原则冲突，一个类应该只关系内部逻辑，而不关心外面怎么样来实例化。</p>
</li>
<li><p><strong>使用场景：</strong></p>
<blockquote>
<ul>
<li>要求生产唯一序列号。</li>
<li>WEB中的计数器，不能每次刷新都在数据库里加一次，用单例先缓存起来。</li>
<li>创建一个对象需要消耗的资源过多，比如I/O与数据库的连接等。</li>
</ul>
</blockquote>
</li>
<li><p><strong>注意事项：</strong> getInstance()方法中需要使用同步锁synchronized(Singleton.class)防止多线程同时进入造成instance被多次实例化。</p>
</li>
</ul>
<h1 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h1><blockquote>
<p>我们将创建一个 SingleObject 类。SingleObject 类有它的私有构造函数和本身的一个静态实例。</p>
</blockquote>
<blockquote>
<p>SingleObject 类提供了一个静态方法，供外界获取它的静态实例。SingletonPatternDemo，我们的演示类使用 SingleObject 类来获取 SingleObject 对象。</p>
</blockquote>


<h2 id="步骤1："><a href="#步骤1：" class="headerlink" title="步骤1："></a>步骤1：</h2><blockquote>
<p>创建一个Singleton类。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*SingleObject.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleObject</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//创建 SingleObject 的一个对象</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> SingleObject instance = <span class="keyword">new</span> SingleObject();</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//让构造函数为 private，这样该类就不会被实例化</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="title">SingleObject</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//获取唯一可用的对象</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleObject <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤2："><a href="#步骤2：" class="headerlink" title="步骤2："></a>步骤2：</h2><blockquote>
<p>从 singleton 类获取唯一的对象。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*SingletonPatternDemo.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonPatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//不合法的构造函数</span></span><br><span class="line">      <span class="comment">//编译时错误：构造函数 SingleObject() 是不可见的</span></span><br><span class="line">      <span class="comment">//SingleObject object = new SingleObject();</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取唯一可用的对象</span></span><br><span class="line">      SingleObject object = SingleObject.getInstance();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//显示消息</span></span><br><span class="line">      object.showMessage();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤3："><a href="#步骤3：" class="headerlink" title="步骤3："></a>步骤3：</h2><blockquote>
<p>执行程序，输出结果：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure>

<h2 id="单例模式的几种实现方式"><a href="#单例模式的几种实现方式" class="headerlink" title="单例模式的几种实现方式"></a>单例模式的几种实现方式</h2><blockquote>
<p>单例模式的实现由多种方式，如下所示：</p>
</blockquote>
<h3 id="懒汉式，线程不安全"><a href="#懒汉式，线程不安全" class="headerlink" title="懒汉式，线程不安全"></a>懒汉式，线程不安全</h3><hr>
<p><strong>是否 Lazy 初始化：</strong> 是<br><strong>是否多线程安全：</strong> 否<br><strong>实现难度：</strong> 易<br><strong><em>描述</em></strong>：这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁 synchronized，所以严格意义上它并不算单例模式。<br>这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="懒汉式，线程安全"><a href="#懒汉式，线程安全" class="headerlink" title="懒汉式，线程安全"></a>懒汉式，线程安全</h3><hr>
<p><strong>是否 Lazy 初始化：</strong> 是<br><strong>是否多线程安全：</strong> 是<br><strong>实现难度：</strong> 易<br><strong><em>描述</em></strong>：这种方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。<br><strong>优点</strong>：第一次调用才初始化，避免内存浪费。<br><strong>缺点</strong>：必须加锁 synchronized 才能保证单例，但加锁会影响效率。<br>getInstance() 的性能对应用程序不是很关键（该方法使用不太频繁）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><hr>
<p><strong>是否 Lazy 初始化：</strong> 否<br><strong>是否多线程安全：</strong> 是<br><strong>实现难度：</strong> 易<br><strong><em>描述</em></strong>：这种方式比较常用，但容易产生垃圾对象。<br><strong>优点</strong>：没有加锁，执行效率会提高。<br><strong>缺点</strong>：类加载时就初始化，浪费内存。   它基于 classloader 机制避免了多线程的同步问题，不过，instance 在类装载时就实例化，虽然导致类装载的原因有很多种，在单例模式中大多数都是调用 getInstance 方法， 但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化 instance 显然没有达到 lazy loading 的效果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="双检锁-双重校验锁（DCL，即-double-checked-locking）"><a href="#双检锁-双重校验锁（DCL，即-double-checked-locking）" class="headerlink" title="双检锁/双重校验锁（DCL，即 double-checked locking）"></a>双检锁/双重校验锁（DCL，即 double-checked locking）</h3><hr>
<p><strong>JDK版本： ** JDK1.5起<br>**是否 Lazy 初始化：</strong> 是<br><strong>是否多线程安全：</strong> 是<br><strong>实现难度：</strong> 较复杂<br><strong><em>描述</em></strong>：这种方式采用双锁机制，安全且在多线程情况下能保持高性能。<br>getInstance() 的性能对应用程序很关键。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();  </span><br><span class="line">        &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> singleton;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="登记式-静态内部类"><a href="#登记式-静态内部类" class="headerlink" title="登记式/静态内部类"></a>登记式/静态内部类</h3><hr>
<p><strong>是否 Lazy 初始化：</strong> 是<br><strong>是否多线程安全：</strong> 是<br><strong>实现难度：</strong> 一般<br><strong><em>描述</em></strong>：这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。<br>这种方式同样利用了 classloader 机制来保证初始化 instance 时只有一个线程，它跟第 3 种方式不同的是：第 3 种方式只要 Singleton 类被装载了，那么 instance 就会被实例化（没有达到 lazy loading 效果），而这种方式是 Singleton 类被装载了，instance 不一定被初始化。因为 SingletonHolder 类没有被主动使用，只有通过显式调用 getInstance 方法时，才会显式装载 SingletonHolder 类，从而实例化 instance。想象一下，如果实例化 instance 很消耗资源，所以想让它延迟加载，另外一方面，又不希望在 Singleton 类加载时就实例化，因为不能确保 Singleton 类还可能在其他的地方被主动使用从而被加载，那么这个时候实例化 instance 显然是不合适的。这个时候，这种方式相比第 3 种方式就显得很合理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> SingletonHolder.INSTANCE;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><hr>
<p><strong>JDK版本： ** JDK1.5起<br>**是否 Lazy 初始化：</strong> 否<br><strong>是否多线程安全：</strong> 是<br><strong>实现难度：</strong> 易<br><strong><em>描述</em></strong>：这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。<br>这种方式是 Effective Java 作者 Josh Bloch 提倡的方式，它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化。不过，由于 JDK1.5 之后才加入 enum 特性，用这种方式写不免让人感觉生疏，在实际工作中，也很少用。<br>不能通过 reflection attack 来调用私有构造方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;  </span><br><span class="line">    INSTANCE;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whateverMethod</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><blockquote>
<p>一般情况下，不建议使用第 1 种和第 2 种懒汉方式，建议使用第 3 种饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用第 5 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。如果有其他特殊的需求，可以考虑使用第 4 种双检锁方式。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>抽象工厂模式</title>
    <url>/undefined/56455/</url>
    <content><![CDATA[<blockquote>
<p>抽象工厂模式(Abstract Factory Pattern)是围绕一个超级工厂创建其他工厂。该工厂又称为其他工厂的工厂。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>
</blockquote><a id="more"></a>
<p>在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定他们的类。每个生成的工厂都能按照工厂模式提供对象。</p>
<h1 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h1><ul>
<li><strong>意图：</strong> 提供一个创建一系列相关或相互依赖对象的接口，而无需指定他们具体的类。</li>
<li><strong>主要解决：</strong> 主要解决接口选择的问题。</li>
<li><strong>何时使用：</strong> 系统的产品有多于一个的产品族，而系统只消费其中某一族的产品。</li>
<li><strong>如何解决：</strong> 在一个产品族里面，定义多个产品。</li>
<li><strong>关键代码：</strong> 在一个工厂里聚合多个同类产品。</li>
<li><strong>应用实例：</strong> 工作了，为了参加一些聚会，肯定有两套或多套衣服吧，比如说商务装(成套，一系列具体产品)、时尚装(成套，一系列具体产品)，甚至对于一个家庭来说，可能有商务女装、商务男装、时尚女装，这些也都是成套的，即一系列具体产品。假设一种情况(现实中是不存在的，要不然，没法进入共产主义了，但有利于说明抽象工厂模式)，在您的家中，某一个衣柜(具体工厂)只能存放某一种这样的衣服(成套，一系列具体产品)，每次拿这种成套的衣服时也自然要从这个衣柜中取出了。用OOP的思想去理解，所有的衣柜(具体工厂)都是衣柜类的(抽象工厂)某一个，而每一件成套的衣服又包括具体的上衣(某一具体产品)，裤子(某一具体产品)，这些具体的上衣其实也都是上衣(抽象产品)，具体的裤子也都是裤子(另一个抽象产品)。</li>
<li><strong>优点：</strong> 当一个产品族中的多个对象被设计成一起工作时，他能保证客户端始终只使用同一个产品族中的对象。</li>
<li><strong>缺点：</strong> 产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的Creator里面代码，又要在具体的里面加代码。</li>
<li><strong>使用场景：</strong> 1、QQ换皮肤，一整套一起换。2、生成不同操作系统的程序。</li>
<li><strong>注意事项：</strong> 产品族难扩展，产品等级易扩展。</li>
</ul>
<h1 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h1><blockquote>
<p>我们将创建Shape和Color接口和实现这些接口的实体类。下一步是创建抽象工厂类<em>AbstractFactory<em>，接着定义工厂类</em>ShapeFactory<em>和</em>ColorFactory</em>,这两个工厂类都是扩展了<em>AbstractFactory</em>。然后创建一个工厂创造器/生成器类FactoryProducer。</p>
</blockquote>
<blockquote>
<p>AbstractFactoryPatternDemo,我们的演示类使用FactoryProducer来获取AbstractFactory对象。它将向AbstractFactory传递形状信息Shape(CIRCLE/RECTANGLE/SQUARE),以便获取它所需对象的类型。同时它还向AbstractFactory传递颜色信息Color(RED/GREEN/BLUE),以便获取它所需对象的类型。同时它还向AbstractFactory传递颜色信息Color(RED/GREEN/BLUE),以便获取它所需对象的类型。</p>
</blockquote>
<img src="/undefined/56455/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.jpg" class title="抽象工厂模式设计类UML图">

<h2 id="步骤1：创建接口"><a href="#步骤1：创建接口" class="headerlink" title="步骤1：创建接口:"></a>步骤1：创建接口:</h2><blockquote>
<p>为形状创建一个接口。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Shape.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="步骤2：实现接口的实体类"><a href="#步骤2：实现接口的实体类" class="headerlink" title="步骤2：实现接口的实体类"></a>步骤2：实现接口的实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Rectangle.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Inside Rectangle::draw() method."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Inside Square::draw() method."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Inside Circle::draw() method."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤3：为颜色创建一个接口。"><a href="#步骤3：为颜色创建一个接口。" class="headerlink" title="步骤3：为颜色创建一个接口。"></a>步骤3：为颜色创建一个接口。</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Color</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤4：实现颜色接口类。"><a href="#步骤4：实现颜色接口类。" class="headerlink" title="步骤4：实现颜色接口类。"></a>步骤4：实现颜色接口类。</h2><blockquote>
<p>创建实现接口的实体类。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Red.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Red</span> <span class="keyword">implements</span> <span class="title">Color</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Inside Red::fill() method."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Green.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Green</span> <span class="keyword">implements</span> <span class="title">Color</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Inside Green::fill() method."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Blue.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blue</span> <span class="keyword">implements</span> <span class="title">Color</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Inside Blue::fill() method."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤5：为Color和Shape对象创建抽象类来获取工厂。"><a href="#步骤5：为Color和Shape对象创建抽象类来获取工厂。" class="headerlink" title="步骤5：为Color和Shape对象创建抽象类来获取工厂。"></a>步骤5：为Color和Shape对象创建抽象类来获取工厂。</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Color <span class="title">getColor</span><span class="params">(String color)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="title">getShape</span><span class="params">(String shape)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="步骤6：-创建扩展了AbstractFactory的工厂类。基于给定的信息生成实体类的对象。"><a href="#步骤6：-创建扩展了AbstractFactory的工厂类。基于给定的信息生成实体类的对象。" class="headerlink" title="步骤6： 创建扩展了AbstractFactory的工厂类。基于给定的信息生成实体类的对象。"></a>步骤6： 创建扩展了AbstractFactory的工厂类。基于给定的信息生成实体类的对象。</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*ShapeFactory.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">(String shapeType)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(shapeType == <span class="keyword">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;        </span><br><span class="line">      <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">"CIRCLE"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">"RECTANGLE"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Rectangle();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">"SQUARE"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Square();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Color <span class="title">getColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*ColorFactory.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">(String shapeType)</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Color <span class="title">getColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(color == <span class="keyword">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;        </span><br><span class="line">      <span class="keyword">if</span>(color.equalsIgnoreCase(<span class="string">"RED"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Red();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(color.equalsIgnoreCase(<span class="string">"GREEN"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Green();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(color.equalsIgnoreCase(<span class="string">"BLUE"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Blue();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤7"><a href="#步骤7" class="headerlink" title="步骤7:"></a>步骤7:</h2><blockquote>
<p>创建一个工厂创造器/生成器类，通过传递形状或颜色来获取工厂。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*FactoryProducer.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryProducer</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractFactory <span class="title">getFactory</span><span class="params">(String choice)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(choice.equalsIgnoreCase(<span class="string">"SHAPE"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> ShapeFactory();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(choice.equalsIgnoreCase(<span class="string">"COLOR"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> ColorFactory();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤8："><a href="#步骤8：" class="headerlink" title="步骤8："></a>步骤8：</h2><blockquote>
<p>使用 FactoryProducer 来获取 AbstractFactory，通过传递类型信息来获取实体类的对象。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactoryPatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取形状工厂</span></span><br><span class="line">      AbstractFactory shapeFactory = FactoryProducer.getFactory(<span class="string">"SHAPE"</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取形状为 Circle 的对象</span></span><br><span class="line">      Shape shape1 = shapeFactory.getShape(<span class="string">"CIRCLE"</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//调用 Circle 的 draw 方法</span></span><br><span class="line">      shape1.draw();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取形状为 Rectangle 的对象</span></span><br><span class="line">      Shape shape2 = shapeFactory.getShape(<span class="string">"RECTANGLE"</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//调用 Rectangle 的 draw 方法</span></span><br><span class="line">      shape2.draw();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//获取形状为 Square 的对象</span></span><br><span class="line">      Shape shape3 = shapeFactory.getShape(<span class="string">"SQUARE"</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//调用 Square 的 draw 方法</span></span><br><span class="line">      shape3.draw();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取颜色工厂</span></span><br><span class="line">      AbstractFactory colorFactory = FactoryProducer.getFactory(<span class="string">"COLOR"</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取颜色为 Red 的对象</span></span><br><span class="line">      Color color1 = colorFactory.getColor(<span class="string">"RED"</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//调用 Red 的 fill 方法</span></span><br><span class="line">      color1.fill();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取颜色为 Green 的对象</span></span><br><span class="line">      Color color2 = colorFactory.getColor(<span class="string">"Green"</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//调用 Green 的 fill 方法</span></span><br><span class="line">      color2.fill();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取颜色为 Blue 的对象</span></span><br><span class="line">      Color color3 = colorFactory.getColor(<span class="string">"BLUE"</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//调用 Blue 的 fill 方法</span></span><br><span class="line">      color3.fill();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤9：输出结果"><a href="#步骤9：输出结果" class="headerlink" title="步骤9：输出结果"></a>步骤9：输出结果</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Inside Circle::draw() method.</span><br><span class="line">Inside Rectangle::draw() method.</span><br><span class="line">Inside Square::draw() method.</span><br><span class="line">Inside Red::fill() method.</span><br><span class="line">Inside Green::fill() method.</span><br><span class="line">Inside Blue::fill() method.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂模式</title>
    <url>/undefined/6013/</url>
    <content><![CDATA[<blockquote>
<p>工厂模式(Factory Pattern)是Java中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口指向新创建的对象。</p>
</blockquote><a id="more"></a>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul>
<li><p><strong>意图：</strong> 定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。</p>
</li>
<li><p><strong>主要解决：</strong> 主要解决接口选择的问题。</p>
</li>
<li><p><strong>如何解决：</strong> 让其子类实现工厂接口，返回的也是一个抽象的产品。</p>
</li>
<li><p><strong>关键代码：</strong> 创建过程在其子类执行。</p>
</li>
<li><p><strong>应用实例：</strong> 1、您需要一辆汽车，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的实现。2、Hibernate换数据库只需换方言和驱动就可以。</p>
<h2 id="优缺点："><a href="#优缺点：" class="headerlink" title="优缺点："></a>优缺点：</h2></li>
<li><p><strong>优点：</strong> 1、一个调用者想要创建一个对象，只要知道其名称就可以了。2、扩展性搞，如果想增加一个产品，只要扩展一个工厂类就可以。2、屏蔽产品的具体实现，调用者只关心产品的接口。</p>
</li>
<li><p><strong>缺点：</strong> 每次增加一个产品是，都需要增加一个具体类和对象实现工厂，使得系统中类的个数城北增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。</p>
</li>
<li><p><strong>使用场景：</strong> </p>
<ul>
<li><p>1、日志记录器：</p>
<blockquote>
<p>记录可能记录到本地硬盘、系统时间、远程服务器等，用户可以选择记录日志到什么地方。</p>
</blockquote>
</li>
<li><p>2、数据库访问：</p>
<blockquote>
<p>当用户不知道最后采用哪一类数据库，以及数据库可能有变化是。</p>
</blockquote>
</li>
<li><p>3、设计一个连接服务器的框架：</p>
<blockquote>
<p>需要三个协议，”POP3”,”IMAP”,”HTTP”,可以把这三个作为产品类，共同实现一个接口。</p>
</blockquote>
</li>
</ul>
</li>
<li><p><strong><em>注意事项：</em></strong> 作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式。有一点需要注意的地方就是复杂独享适合使用工厂模式，而简单对象，特别是只需要通过new就可以完成创建的对象，无需使用工厂模式。如果使用工厂模式，就需要引入一个工厂类，会增加系统的复杂度。</p>
</li>
</ul>
<h1 id="实现过程："><a href="#实现过程：" class="headerlink" title="实现过程："></a>实现过程：</h1><blockquote>
<p>我们将创建一个Shape接口和实现Shape接口的实体类。下一步是定义工厂类<em>ShapeFactory<em>。</em>FactoryPatternDemo</em>,我们将演示类使用<em>ShapeFactory<em>来获取</em>Shape<em>对象。它将向</em>ShapeFactory<em>传递信息(</em>CIRCLE / RECTANGLE / SQUARE</em>),以便获取它所需要对象的类型。</p>
</blockquote>
<img src="/undefined/6013/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.jpg" class title="工厂模式设计类UML图">

<h2 id="步骤1："><a href="#步骤1：" class="headerlink" title="步骤1："></a>步骤1：</h2><blockquote>
<p>创建接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Shape.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤2："><a href="#步骤2：" class="headerlink" title="步骤2："></a>步骤2：</h2><blockquote>
<p>创建实现接口的实体类。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Rectangle.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Inside Rectangle::draw() method."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Square.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Inside Square::draw() method."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Circle.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Inside Circle::draw() method."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤3："><a href="#步骤3：" class="headerlink" title="步骤3："></a>步骤3：</h2><blockquote>
<p>创建一个工厂，生成基于给定信息的实体类的对象。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*ShapeFactory.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeFactory</span> </span>&#123;</span><br><span class="line">   <span class="comment">//使用 getShape 方法获取形状类型的对象</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">(String shapeType)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(shapeType == <span class="keyword">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;        </span><br><span class="line">      <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">"CIRCLE"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">"RECTANGLE"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Rectangle();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">"SQUARE"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Square();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤4："><a href="#步骤4：" class="headerlink" title="步骤4："></a>步骤4：</h2><blockquote>
<p>使用该工厂，通过传递类型信息来获取实体类的对象。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*FactoryPatternDemo.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryPatternDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      ShapeFactory shapeFactory = <span class="keyword">new</span> ShapeFactory();</span><br><span class="line">      <span class="comment">//获取 Circle 的对象，并调用它的 draw 方法</span></span><br><span class="line">      Shape shape1 = shapeFactory.getShape(<span class="string">"CIRCLE"</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//调用 Circle 的 draw 方法</span></span><br><span class="line">      shape1.draw();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取 Rectangle 的对象，并调用它的 draw 方法</span></span><br><span class="line">      Shape shape2 = shapeFactory.getShape(<span class="string">"RECTANGLE"</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//调用 Rectangle 的 draw 方法</span></span><br><span class="line">      shape2.draw();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取 Square 的对象，并调用它的 draw 方法</span></span><br><span class="line">      Shape shape3 = shapeFactory.getShape(<span class="string">"SQUARE"</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//调用 Square 的 draw 方法</span></span><br><span class="line">      shape3.draw();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="步骤5："><a href="#步骤5：" class="headerlink" title="步骤5："></a>步骤5：</h2><blockquote>
<p>执行程序，输出结果：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Inside Circle::draw() method.</span><br><span class="line">Inside Rectangle::draw() method.</span><br><span class="line">Inside Square::draw() method.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式介绍</title>
    <url>/undefined/4657/</url>
    <content><![CDATA[<h1 id="设计模式简介"><a href="#设计模式简介" class="headerlink" title="设计模式简介"></a>设计模式简介</h1><blockquote>
<p>设计模式(Design pattern)代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>
</blockquote><a id="more"></a>
<p>设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。毫无疑问，设计模式与己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式使软件工程的基石，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。</p>
<blockquote>
<p>总共有23中设计模式。这些模式可以分为三大类：</p>
<ul>
<li>创建型模式（Creational Patterns）、</li>
<li>结构型模式（Structural Patterns）、</li>
<li>行为型模式（Behavioral Patterns）  </li>
</ul>
</blockquote>
<blockquote>
<p>当然，我们还会讨论另一类设计模式：J2EE 设计模式。</p>
</blockquote>
<h1 id="设计模式类型"><a href="#设计模式类型" class="headerlink" title="设计模式类型"></a>设计模式类型</h1><blockquote>
<p>总体来说设计模式分为三大类：</p>
</blockquote>
<h2 id="创建型模式："><a href="#创建型模式：" class="headerlink" title="创建型模式："></a>创建型模式：</h2><blockquote>
<p>这些设计模式提供了一种在创建队形的同时隐藏创建逻辑的方式，而不是使用new运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</p>
</blockquote>
<ul>
<li>工厂方法模式(Factory Pattern)：<a href="/undefined/6013/" title="工厂模式">工厂模式</a></li>
<li>抽象工厂模式(Abstract Factory Pattern)：<a href="/undefined/56455/" title="抽象工厂模式">抽象工厂模式</a></li>
<li>单例模式(Singleton Pattern)：<a href="/undefined/46132/" title="单例模式">单例模式</a></li>
<li>建造者模式(Builder Pattern)：<a href="/undefined/29711/" title="建造者模式">建造者模式</a></li>
<li>原型模式(Prototype Pattern)：<a href="/undefined/22548/" title="原型模式">原型模式</a></li>
</ul>
<h2 id="结构型模式："><a href="#结构型模式：" class="headerlink" title="结构型模式："></a>结构型模式：</h2><blockquote>
<p>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</p>
</blockquote>
<ul>
<li>适配器模式(Adapter Pattern)</li>
<li>桥接模式(Bridge Pattern)</li>
<li>过滤器模式(Filter、Criteria Pattern)</li>
<li>组合模式(Composite Pattern)</li>
<li>装饰器模式(Decorator Pattern)</li>
<li>外观模式(Facade Pattern)</li>
<li>享元模式(Flyweight Pattern)</li>
<li>代理模式(Proxy Pattern)</li>
</ul>
<h2 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式:"></a>行为型模式:</h2><blockquote>
<p>这些设计模式特别关注对象之间的通信。</p>
</blockquote>
<ul>
<li><p>责任链模式(Chain of Responsibility Pattern)</p>
</li>
<li><p>命令模式(Command Pattern)</p>
</li>
<li><p>解释器模式(Interpreter Pattern)：<a href="/undefined/16035/" title="解释器模式">解释器模式</a></p>
</li>
<li><p>迭代器模式(Iterator Pattern)</p>
</li>
<li><p>中介者模式(Mediator Pattern)</p>
</li>
<li><p>备忘录模式(Memento Pattern)</p>
</li>
<li><p>观察者模式(Observer Pattern)</p>
</li>
<li><p>状态模式(State Pattern)</p>
</li>
<li><p>空对象模式(Null Object Pattern)</p>
</li>
<li><p>策略模式(Strategy Pattern)</p>
</li>
<li><p>模板模式(Template Pattern)</p>
</li>
<li><p>访问者模式(Visitor Pattern)</p>
<h2 id="J2EE模式"><a href="#J2EE模式" class="headerlink" title="J2EE模式"></a>J2EE模式</h2><blockquote>
<p>这些设计模式特别关注表示层，这些模式是由Sun Java Center鉴定的。</p>
</blockquote>
</li>
<li><p>MVC 模式(MVC Pattern)</p>
</li>
<li><p>业务代表模式(Business Delegate Pattern)</p>
</li>
<li><p>组合实体模式(Composite Entity Pattern)</p>
</li>
<li><p>数据访问对象模式(Data Access Object Pattern)</p>
</li>
<li><p>前端控制器模式(Front Controller Pattern)</p>
</li>
<li><p>拦截过滤器模式(Intercepting Filter Pattern)</p>
</li>
<li><p>服务定位器模式(Service Locator Pattern)</p>
</li>
<li><p>传输对象模式(Transfer Object Pattern)</p>
</li>
</ul>
<h1 id="设计模式的六大原则："><a href="#设计模式的六大原则：" class="headerlink" title="设计模式的六大原则："></a>设计模式的六大原则：</h1><ol>
<li>开闭原则(Open Close Principle)<blockquote>
<p>开闭原则的意思是：<strong>对扩展开放，对修改关闭。</strong> 在程序需要进行扩展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类。</p>
</blockquote>
</li>
<li>里氏代换原则(Liskov Substitution Principle)<blockquote>
<p>里氏代换原则是面向对象设计的基本原则之一，里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p>
</blockquote>
</li>
<li>依赖倒转原则(Dependence Inversion Principle)<blockquote>
<p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p>
</blockquote>
</li>
<li>接口隔离原则(Interface Segregation Principle)<blockquote>
<p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护党的软件设计思想，它强调降低依赖，降低耦合。</p>
</blockquote>
</li>
<li>迪米特法则，又称最少知道法则(Demeter Principle)<blockquote>
<p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p>
</blockquote>
</li>
<li>合成复用原则(Composite Reuse Principle)<blockquote>
<p>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</p>
</blockquote>
</li>
</ol>
<blockquote>
<p>其实还有两类：并发型模式和线程池模式。用一个图片来描述一下：</p>
</blockquote>
<img src="/undefined/4657/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.jpg" class title="设计模式之间的关系">

]]></content>
  </entry>
  <entry>
    <title>解释器模式</title>
    <url>/undefined/16035/</url>
    <content><![CDATA[<h1 id="解释器模式："><a href="#解释器模式：" class="headerlink" title="解释器模式："></a>解释器模式：</h1><blockquote>
<p>解释器模式(Interpreter Pattern)提供了评估语言的语法或表达式的方式，它属于行为型模式。这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在SQL解析、符号处理引擎等。</p>
</blockquote><a id="more"></a>
<h2 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h2><ul>
<li><strong>意图</strong>：给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。</li>
<li><strong>主要解决</strong>：对于一些固定文法构建一个解释句子的解释器。</li>
<li><strong>何时使用</strong>：如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。</li>
<li><strong>如何解决</strong>：构建语法树，定义终结符与非终结符。</li>
<li><strong>关键代码</strong>：构建环境类，包含解释器之外的一些全局信息，一般是HashMap。</li>
<li><strong>应用实例</strong>：编译器、运算表达式计算。<h2 id="优缺点："><a href="#优缺点：" class="headerlink" title="优缺点："></a>优缺点：</h2></li>
<li>优点：<ul>
<li>1、可扩展性比较好，灵活。</li>
<li>2、增加了新的解释表达式的方式。</li>
<li>3、易于实现简单方法。</li>
</ul>
</li>
<li>缺点：<ul>
<li>1、可利用场景比较少。</li>
<li>2、对于复杂的文法比较难维护。</li>
<li>3、解释器模式会引起类膨胀。</li>
<li>4、解释器模式采用地柜调用方法。</li>
</ul>
</li>
<li>使用场景：<ul>
<li>1、可以将一个需要解释执行的语言中的句子表示为一个抽象语法树。</li>
<li>2、一些重复出现的问题可以用一种简单的语言来进行表达。</li>
<li>3、一个简单语法需要解释的场景。<blockquote>
<p><strong><em>注意事项：可利用场景比较少，JAVA中如果碰到可以用expression4J代替。</em></strong></p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h2><blockquote>
<p>我们将创建一个接口Expression和实现了Expression接口的实体类。定义作为上下文中主要解释器的TerminalExpression类。其他的类OrExpression、AndExpression用于创建组合式表达式。<br>InterpreterPatternDemo，我们的演示类使用Expression类创建规则和演示表达式的解析。</p>
</blockquote>
<img src="/undefined/16035/%E8%A7%A3%E9%87%8A%E5%99%A8UML.jpg" class title="解释器UML图">

<ul>
<li>步骤1：创建一个表达式接口：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">interpret</span><span class="params">(String context)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>步骤2：创建实现了上述接口的实体类。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TerminalExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String data;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TerminalExpression</span><span class="params">(String data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data=data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">interpret</span><span class="params">(String context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(context.contains(data))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Expression expr1 = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Expression expr2 = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrExpression</span><span class="params">(Expression expr1,Expression expr2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.expr1=expr1;</span><br><span class="line">        <span class="keyword">this</span>.expr2=expr2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">interpret</span><span class="params">(String context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> expr1.interpret(context)||expr2.interpret(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AndExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Expression expr1 = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Expression expr2 = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AndExpression</span><span class="params">(Expression expr1,Expression expr2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.expr1=expr1;</span><br><span class="line">        <span class="keyword">this</span>.expr2=expr2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">interpret</span><span class="params">(String context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> expr1.interpret(context)&amp;&amp;expr2.interpret(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>步骤3 :InterpreterPatternDemo使用Expression类来创建规则，并解析他们。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterpreterPatternDemo</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//规则：robert和John是男性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Expression <span class="title">getMaleExpression</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        Expression robert = <span class="keyword">new</span> TerminalExpression(<span class="string">"robert"</span>);</span><br><span class="line">        Expression john = <span class="keyword">new</span> TerminalExpression(<span class="string">"john"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OrExpression(robert,john);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//规则：robert和John是男性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Expression <span class="title">getMarriedWomanExpression</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Expression julie = <span class="keyword">new</span> TerminalExpression(<span class="string">"julie"</span>);</span><br><span class="line">        Expression married = <span class="keyword">new</span> TerminalExpression(<span class="string">"Married"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AndExpression(julie,married);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Expression isMale = getMaleExpression();</span><br><span class="line">        Expression isMarriedWoman = getMarriedWomanExpression();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"john is male?"</span>+isMale.interpret(<span class="string">"john"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Julie is a married women?"</span>+isMarriedWoman.interpret(<span class="string">"Married julie"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>步骤4：执行程序，输出结果：<blockquote>
<p>John is male? true<br>Julie is a married women? true</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java_正则表达式</title>
    <url>/undefined/12588/</url>
    <content><![CDATA[<p>正则表达式：符合一定规则的表达式。</p><ul>
<li><p>作用：用于专门操作字符串。</p>
</li>
<li><p>特点：用一些特定的符号来表示一些代码操作，这样就简化书写。</p>
<blockquote>
<p>所以学习正则表达式，就是在学习一些特殊符号的使用。</p>
</blockquote>
</li>
<li><p>好处：可以简化对字符串的复杂操作。</p>
</li>
<li><p>弊端：符号定义越多，正则越长，阅读性越差。</p>
</li>
</ul><a id="more"></a>

<h1 id="具体操作功能："><a href="#具体操作功能：" class="headerlink" title="具体操作功能："></a>具体操作功能：</h1><h2 id="1-匹配：String"><a href="#1-匹配：String" class="headerlink" title="1.匹配：String"></a>1.匹配：String</h2><p>matches方法。用规则匹配整个字符串，只要有一处不符合规则，就匹配结束，返回false<br>正则表达式中的“\”需要进行转义,所以是成对出现的。<br>字符出现次数：</p>
<ul>
<li>？(一次或一次也没有)</li>
<li>*（零次或多次）</li>
<li>+（一次或多次）</li>
<li>{n}(恰好n次)</li>
<li>{n,}(至少n次)</li>
<li>{n,m}(至少n次，但是不超过m次)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对QQ号码进行校验</span></span><br><span class="line"><span class="comment">//要求：5~15位，0不能开头，只能是数字</span></span><br><span class="line"><span class="comment">//这种方式，使用了String类中的方法，进行组合完成了需求，但是代码过于复杂。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkQQ</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String qq=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">int</span> len = qq.length();</span><br><span class="line">    <span class="keyword">if</span>(len&gt;<span class="number">5</span>&amp;&amp;len&lt;=<span class="number">15</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!qq.startWith(<span class="string">"0"</span>))&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            char[] arr = qq.toCharArray();</span></span><br><span class="line"><span class="comment">            boolean flag= true;</span></span><br><span class="line"><span class="comment">            for(int x=0;x&lt;arr.length;x++)&#123;</span></span><br><span class="line"><span class="comment">                if(!(arr[x]&gt;'0'&amp;&amp;arr[x]&lt;='9'))&#123;</span></span><br><span class="line"><span class="comment">                     flag=false;</span></span><br><span class="line"><span class="comment">                     break;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            if(flag)&#123;</span></span><br><span class="line"><span class="comment">                System.out.println("qq:"+qq);</span></span><br><span class="line"><span class="comment">            &#125;else&#123;</span></span><br><span class="line"><span class="comment">                System.out.println("出现非法字符");</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="comment">//替换为：</span></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">long</span> l = Long.parseLong(qq);</span><br><span class="line">                System.out.println(<span class="string">"qq:"</span>+qq);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(NumberFormatException e)&#123;</span><br><span class="line">                SYstem.out.println(<span class="string">"出现非法字符"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"0不能开头"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"长度不对"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用下面的方法比较简单：regex(正则表达式)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkQQ_simple</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String qq =<span class="string">"255616548"</span>;</span><br><span class="line">    String regex =<span class="string">"[1-9][0-9]&#123;4,14&#125;"</span>;<span class="comment">//正则表达式</span></span><br><span class="line">    <span class="keyword">boolean</span> flag = qq.matches(regex);</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">        System.out.println(qq+<span class="string">" ...is ok"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(qq+<span class="string">"...不合法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-切割："><a href="#2-切割：" class="headerlink" title="2.切割："></a>2.切割：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">splitDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//String str ="zhangsan  lisi   wangwu";</span></span><br><span class="line">    <span class="comment">//String reg=" +";//按照多个空格来进行切割</span></span><br><span class="line">    <span class="comment">//String str ="zhangsan.lisi.wangwu";</span></span><br><span class="line">    <span class="comment">//String reg ="\\.";//用点来进行切割</span></span><br><span class="line">    <span class="comment">//String str ="c:\\abc\\a.txt";</span></span><br><span class="line">    <span class="comment">//String reg ="\\\\";//用\\来进行切割</span></span><br><span class="line">    String str =<span class="string">"ekjfokksdjfoiewdd"</span>;</span><br><span class="line">    String reg =<span class="string">"(.)\\1"</span>;<span class="comment">//用叠词来进行切割()叫做组 叠词数量不定"(.)\\1+"</span></span><br><span class="line">    \\为了可以让规则的结果被重用，可以将规则封装成一个组，用()来完成，</span><br><span class="line">    \\组的出现都有编号。</span><br><span class="line">    \\从<span class="number">1</span>开始。想要使用已有的组可以通过\n(n就是组的编号)的形式来获取。</span><br><span class="line">    String[]arr = str.split(reg);</span><br><span class="line">    System.out.println(arr.length);</span><br><span class="line">    <span class="keyword">for</span>(String s : arr)&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-替换"><a href="#3-替换" class="headerlink" title="3.替换"></a>3.替换</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">replace</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//String str ="dfw902839082193jfefioe21093";</span></span><br><span class="line">    <span class="comment">//String reg ="\\d&#123;5,&#125;";//数字替换</span></span><br><span class="line">    String str =<span class="string">"skdlfaaafewiodddfeoi"</span>;</span><br><span class="line">    <span class="comment">//String reg ="(.)\\1+";//叠词替换为&amp;</span></span><br><span class="line">    <span class="comment">//String newStr="&amp;";</span></span><br><span class="line">    String reg=<span class="string">"(.)\\1+"</span>;<span class="comment">//叠词替换为叠词中的单个词</span></span><br><span class="line">    String newStr =<span class="string">"$1"</span>;<span class="comment">//$1获取前一个规则中的第一个组。</span></span><br><span class="line">    String arr = str.replaceAll(reg,newStr);</span><br><span class="line">    System.out.println(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-获取："><a href="#4-获取：" class="headerlink" title="4.获取："></a>4.获取：</h2><blockquote>
<p>按照规则将指定规则的子串在字符串中获取出来。</p>
</blockquote>
<p>操作步骤：</p>
<ul>
<li>1.将正则表达式封装成对象。</li>
<li>2.让正则对象和要操作的字符串相关联。</li>
<li>3.关联后，获取正则匹配引擎。</li>
<li>4.通过引擎对符合规则的子串进行操作，比如取出。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String str = <span class="string">"abc djfewo dsjfo dfd fjei dfs"</span>;</span><br><span class="line">    String reg=<span class="string">"\\b[a-z]&#123;3&#125;\\b"</span>;<span class="comment">//查找只有三个单词的，需要加一个边界\\b</span></span><br><span class="line">    <span class="comment">//将规则封装成对象。</span></span><br><span class="line">    Pattern p = Pattern.compile(reg);</span><br><span class="line">    <span class="comment">//让正则对象和要作用的字符串进行关联。获取匹配器对象。</span></span><br><span class="line">    Matcher m = p.matcher(str);</span><br><span class="line">    <span class="comment">//System.out.println(m.matches());//其实String类中的matches方法。用的就是Pattern</span></span><br><span class="line">                                    <span class="comment">//和Matcher对象来完成的。只不过被String的方法封</span></span><br><span class="line">                                   <span class="comment">//装后，用起来比较简单，但是功能却单一。</span></span><br><span class="line">    <span class="comment">//group()方法是获取匹配后结果</span></span><br><span class="line">    <span class="comment">//m.find();//将规则作用到字符串上，并进行符合规则的子串查找。是group()方法的前提。</span></span><br><span class="line">    <span class="comment">//System.out.println(m.group());匹配之前先要使用find()进行查找。</span></span><br><span class="line">    <span class="keyword">while</span>(m.find())&#123;</span><br><span class="line">        System.out.println(m.group);</span><br><span class="line">        System.out.println(m.start()+<span class="string">"....."</span>+m.end());<span class="comment">//取得是字串的开头和结尾。</span></span><br><span class="line">    &#125;</span><br><span class="line">                                       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
练习：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//邮箱匹配</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkMail</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String mail = <span class="string">"abc12@sunline.orc.com"</span>;</span><br><span class="line">    String reg=<span class="string">"[a-zA-Z0-9_]+@[a-zA-Z0-9]+(\\.[a-zA-Z]+)&#123;1,3&#125;"</span>;<span class="comment">//较为精确的匹配。</span></span><br><span class="line">    reg=<span class="string">"\\w+@\\w+(\\.\\w+)+"</span>;<span class="comment">//相对不太精确的匹配</span></span><br><span class="line">    System.out.println(mail.matches(reg));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>目录</title>
    <url>/undefined/2044296166/</url>
    <content><![CDATA[<div align=center>我是目录</div>
<div align=center>对应代码仓库地址如下:</div>

<p><a href="https://github.com/leithda/code_warehouse" target="_blank" rel="noopener">Github代码仓库</a> | <a href="https://gitee.com/leithda/code_warehouse" target="_blank" rel="noopener">Gitee代码仓库</a>      </p>
<a id="more"></a>

<ul>
<li><p>Algorithm(算法)</p>
<ul>
<li>leetcode 题库</li>
<li>started(起步教程)<ul>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/1935562632.html">排序</a></li>
</ul>
</li>
</ul>
</li>
<li><p>Database(数据库)</p>
</li>
<li><p>Tools(工具)</p>
<ul>
<li>git<ul>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/2879265125.html">Git-Book</a></li>
</ul>
</li>
</ul>
</li>
<li><p>Program(编程)</p>
<ul>
<li><p>go</p>
</li>
<li><p>java</p>
<ul>
<li><p>core(jdk源码)</p>
<ul>
<li>collection(集合)<ul>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/3276972275.html">ArrayList</a></li>
<li><input disabled="" type="checkbox"> <a href="">LinkedList</a></li>
</ul>
</li>
<li>thread(多线程)<ul>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/2990170790.html">THreadPoolExecutor</a></li>
</ul>
</li>
</ul>
</li>
<li><p>basic(基础)</p>
<ul>
<li>Date&amp;Time(日期)<ul>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/2517593741.html">java8 处理日期和时间</a></li>
</ul>
</li>
</ul>
</li>
<li><p>opensource(开源代码)</p>
<ul>
<li><a href="../categories/Java/Tomcat">Tomcat(Hot Tomcat Worls)</a><ul>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/1805298928.html">编码前准备</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/1975698977.html">一个简单的Web服务器</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/991341650.html">一个简单的Servlet容器</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/2076341340.html">连接器</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/479209129.html">tomcat的默认连接器</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/3459939477.html">容器</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/1950977268.html">生命周期</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/3784073105.html">日志系统</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/4141534283.html">加载器</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/1571172711.html">session管理</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/3630618985.html">安全</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/1604995939.html">StandardWrapper</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/1923304143.html">StandardContext</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/700695093.html">主机(host)和引擎(engine)</a></li>
<li><input disabled="" type="checkbox"> <a href="">服务器和服务</a></li>
<li><input disabled="" type="checkbox"> <a href="">Digester</a></li>
<li><input disabled="" type="checkbox"> <a href="">关闭钩子</a></li>
<li><input disabled="" type="checkbox"> <a href="">Tomcat 启动</a></li>
<li><input disabled="" type="checkbox"> <a href="">部署器</a></li>
<li><input disabled="" type="checkbox"> <a href="">管理 Servlet</a></li>
<li><input disabled="" type="checkbox"> <a href="">JMX-Based Management</a></li>
</ul>
</li>
<li><a href="../categories/Java/Mybatis/">Mybatis(芋道源码)</a><ul>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/3692374944.html">Mybatis源码解析-概览</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/3510268826.html">Mybatis源码解析-解析器模块</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/2532778738.html">Mybatis源码解析-反射模块</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/1783791857.html">Mybatis源码解析-异常模块</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/3958014950.html">Mybatis源码解析-数据源模块</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/3506020362.html">Mybatis源码解析-事务模块</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/3051614827.html">Mybatis源码解析-缓存模块</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/2139696773.html">Mybatis源码解析-类型模块</a></li>
<li><input disabled="" type="checkbox"> <a href="">Mybatis源码解析-IO模块</a></li>
<li><input disabled="" type="checkbox"> <a href="">Mybatis源码解析-日志</a></li>
<li><input disabled="" type="checkbox"> <a href="">Mybatis源码解析-注解</a></li>
<li><input disabled="" type="checkbox"> <a href="">Mybatis源码解析-Binding</a></li>
<li><input disabled="" type="checkbox"> <a href="">Mybatis源码解析-MyBatis 初始化（一）之加载 mybatis-config</a></li>
<li><input disabled="" type="checkbox"> <a href="">Mybatis源码解析-MyBatis 初始化（二）之加载 Mapper 映射配置文件</a></li>
<li><input disabled="" type="checkbox"> <a href="">Mybatis源码解析-MyBatis 初始化（三）之加载 Statement 配置</a></li>
<li><input disabled="" type="checkbox"> <a href="">Mybatis源码解析-MyBatis 初始化（四）之加载注解配置</a></li>
<li><input disabled="" type="checkbox"> <a href="">Mybatis源码解析-SQL 初始化（上）之 SqlNode</a></li>
<li><input disabled="" type="checkbox"> <a href="">Mybatis源码解析-SQL 初始化（下）之 SqlSource</a></li>
<li><input disabled="" type="checkbox"> <a href="">Mybatis源码解析-SQL 执行（二）之 StatementHandler</a></li>
<li><input disabled="" type="checkbox"> <a href="">Mybatis源码解析-SQL 执行（五）之延迟加载</a></li>
<li><input disabled="" type="checkbox"> <a href="">Mybatis源码解析-会话 SqlSession</a></li>
<li><input disabled="" type="checkbox"> <a href="">Mybatis源码解析-插件体系（一）之原理</a></li>
<li><input disabled="" type="checkbox"> <a href="">Mybatis源码解析-插件体系（二）之 PageHelper</a></li>
<li><input disabled="" type="checkbox"> <a href="">Mybatis源码解析-Spring 集成（一）之调试环境搭建</a></li>
<li><input disabled="" type="checkbox"> <a href="">Mybatis源码解析-Spring 集成（二）之初始化</a></li>
<li><input disabled="" type="checkbox"> <a href="">Mybatis源码解析-Spring 集成（二）之初始化</a></li>
<li><input disabled="" type="checkbox"> <a href="">Mybatis源码解析-Spring 集成（三）之 SqlSession</a></li>
<li><input disabled="" type="checkbox"> <a href="">Mybatis源码解析-Spring 集成（四）之事务</a></li>
<li><input disabled="" type="checkbox"> <a href="">Mybatis源码解析-Spring 集成（五）之批处理</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>started[起步教程]</p>
<ul>
<li><a href="../categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F">design-pattern(设计模式)</a><ul>
<li>创建型<ul>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/4049607742.html">Single Pattern[单例模式]</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/1417187187.html">Factory Pattern[工厂模式]</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/2506759259.html">Abstract Factory Pattern[抽象工厂]</a></li>
<li><input disabled="" type="checkbox"> <a href="">Builder Pattern[建造者模式]</a></li>
<li><input disabled="" type="checkbox"> <a href="">Prototype Pattern[原型模式]</a></li>
</ul>
</li>
<li>行为型<ul>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/1644716670.html">Chain of Responsibility Pattern[责任链模式]</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/256138576.html">Command Pattern[命令模式]</a></li>
<li><input disabled="" type="checkbox"> <a href="">Interpreter Pattern[解释器模式]</a></li>
<li><input disabled="" type="checkbox"> <a href="">Iterator Pattern[迭代器模式]</a></li>
<li><input disabled="" type="checkbox"> <a href="">Mediator Pattern[中介者模式]</a></li>
<li><input disabled="" type="checkbox"> <a href="">Memento Pattern[备忘录模式]</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/2586075670.html">Observer Pattern[观察者模式]</a></li>
<li><input disabled="" type="checkbox"> <a href="">State Pattern[状态模式]</a></li>
<li><input disabled="" type="checkbox"> <a href="">Strategy Pattern[策略模式]</a></li>
<li><input disabled="" type="checkbox"> <a href="">Template Pattern[模板模式]</a></li>
<li><input disabled="" type="checkbox"> <a href="">Visitor Pattern[访问者模式]</a></li>
<li><input disabled="" type="checkbox"> <a href="">Null Object Pattern[空对象模式]</a></li>
<li><input disabled="" type="checkbox"> <a href="">Filter Pattern[过滤器模式]</a></li>
</ul>
</li>
<li>结构型<ul>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/4123342314.html">Adapter Pattern[适配器模式]</a></li>
<li><input disabled="" type="checkbox"> <a href="">Bridge Pattern[桥接模式]</a></li>
<li><input disabled="" type="checkbox"> <a href="">Composite Pattern[组合模式]</a></li>
<li><input disabled="" type="checkbox"> <a href="">Decorator Pattern[装饰器模式]</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/4158556840.html">Facade Pattern[外观模式]</a></li>
<li><input disabled="" type="checkbox"> <a href="">Flyweight Pattern[享元模式]</a></li>
<li><input disabled="" type="checkbox"> <a href="">Proxy Pattern[代理模式]</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="../categories/Java/Spring-Cloud">Spring Cloud(深入理解Spring Cloud与微服务构建)</a><ul>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/518531817.html">Eureka(服务注册与发现)</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/2968946741.html">Ribbon(负载均衡)</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/874139413.html">Feign(声明式调用)</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/1776285993.html">Hystrix(熔断器)</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/1996565447.html">Zuul(智能网关)</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/1798410625.html">Config(配置中心)</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/3833359923.html">Zipkin(链路追踪)</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="../detail/1287611694.html">Admin(微服务监控)</a></li>
<li><input disabled="" type="checkbox"> <a href="">Spring Boot Security</a></li>
<li><input disabled="" type="checkbox"> <a href="">使用Spring Cloud OAuth2</a></li>
<li><input disabled="" type="checkbox"> <a href="">使用Spring Security OAuth2</a></li>
<li><input disabled="" type="checkbox"> <a href="">使用Spring Cloud构建微服务综合案例</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>测试</title>
    <url>/undefined/37773/</url>
    <content><![CDATA[<p>#图片</p><img src="/undefined/37773/abc.jpg" class title="测试图">]]></content>
      <categories>
        <category>Test</category>
      </categories>
      <tags>
        <tag>源码</tag>
      </tags>
  </entry>
</search>
